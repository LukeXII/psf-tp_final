
PSF-TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000503c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011ecc  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080170b4  080170b4  000300cc  2**0
                  CONTENTS
  4 .ARM          00000008  080170b4  080170b4  000270b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080170bc  080170bc  000300cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080170bc  080170bc  000270bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080170c0  080170c0  000270c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080170c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300cc  2**0
                  CONTENTS
 10 .bss          00000708  200000cc  200000cc  000300cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007d4  200007d4  000300cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 13 .comment      000000b1  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001351d  00000000  00000000  000301ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030f8  00000000  00000000  000436ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d20  00000000  00000000  000467c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008e5  00000000  00000000  000474e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000265bd  00000000  00000000  00047dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011880  00000000  00000000  0006e38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4410  00000000  00000000  0007fc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003894  00000000  00000000  0016401c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001678b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00003ed3  00000000  00000000  00167902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000130  00000000  00000000  0016b7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000cc 	.word	0x200000cc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080051d0 	.word	0x080051d0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000d0 	.word	0x200000d0
 80001e8:	080051d0 	.word	0x080051d0

080001ec <arm_bitreversal_32>:
 80001ec:	1c4b      	adds	r3, r1, #1
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	bf98      	it	ls
 80001f2:	4770      	bxls	lr
 80001f4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001f8:	1c91      	adds	r1, r2, #2
 80001fa:	089b      	lsrs	r3, r3, #2

080001fc <arm_bitreversal_32_0>:
 80001fc:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000200:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000204:	880a      	ldrh	r2, [r1, #0]
 8000206:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020a:	4480      	add	r8, r0
 800020c:	4481      	add	r9, r0
 800020e:	4402      	add	r2, r0
 8000210:	4484      	add	ip, r0
 8000212:	f8d9 7000 	ldr.w	r7, [r9]
 8000216:	f8d8 6000 	ldr.w	r6, [r8]
 800021a:	6815      	ldr	r5, [r2, #0]
 800021c:	f8dc 4000 	ldr.w	r4, [ip]
 8000220:	f8c9 6000 	str.w	r6, [r9]
 8000224:	f8c8 7000 	str.w	r7, [r8]
 8000228:	f8cc 5000 	str.w	r5, [ip]
 800022c:	6014      	str	r4, [r2, #0]
 800022e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000232:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000236:	6855      	ldr	r5, [r2, #4]
 8000238:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800023c:	f8c9 6004 	str.w	r6, [r9, #4]
 8000240:	f8c8 7004 	str.w	r7, [r8, #4]
 8000244:	f8cc 5004 	str.w	r5, [ip, #4]
 8000248:	6054      	str	r4, [r2, #4]
 800024a:	3108      	adds	r1, #8
 800024c:	3b01      	subs	r3, #1
 800024e:	d1d5      	bne.n	80001fc <arm_bitreversal_32_0>
 8000250:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000254:	4770      	bx	lr

08000256 <arm_bitreversal_16>:
 8000256:	1c4b      	adds	r3, r1, #1
 8000258:	2b01      	cmp	r3, #1
 800025a:	bf98      	it	ls
 800025c:	4770      	bxls	lr
 800025e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000262:	1c91      	adds	r1, r2, #2
 8000264:	089b      	lsrs	r3, r3, #2

08000266 <arm_bitreversal_16_0>:
 8000266:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026a:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800026e:	880a      	ldrh	r2, [r1, #0]
 8000270:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000274:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000278:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 800027c:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000280:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000284:	f8d9 7000 	ldr.w	r7, [r9]
 8000288:	f8d8 6000 	ldr.w	r6, [r8]
 800028c:	6815      	ldr	r5, [r2, #0]
 800028e:	f8dc 4000 	ldr.w	r4, [ip]
 8000292:	f8c9 6000 	str.w	r6, [r9]
 8000296:	f8c8 7000 	str.w	r7, [r8]
 800029a:	f8cc 5000 	str.w	r5, [ip]
 800029e:	6014      	str	r4, [r2, #0]
 80002a0:	3108      	adds	r1, #8
 80002a2:	3b01      	subs	r3, #1
 80002a4:	d1df      	bne.n	8000266 <arm_bitreversal_16_0>
 80002a6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002aa:	4770      	bx	lr

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b970 	b.w	80005a4 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e0:	9e08      	ldr	r6, [sp, #32]
 80002e2:	460d      	mov	r5, r1
 80002e4:	4604      	mov	r4, r0
 80002e6:	460f      	mov	r7, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14a      	bne.n	8000382 <__udivmoddi4+0xa6>
 80002ec:	428a      	cmp	r2, r1
 80002ee:	4694      	mov	ip, r2
 80002f0:	d965      	bls.n	80003be <__udivmoddi4+0xe2>
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	b143      	cbz	r3, 800030a <__udivmoddi4+0x2e>
 80002f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	fa20 f202 	lsr.w	r2, r0, r2
 8000306:	4317      	orrs	r7, r2
 8000308:	409c      	lsls	r4, r3
 800030a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030e:	fa1f f58c 	uxth.w	r5, ip
 8000312:	fbb7 f1fe 	udiv	r1, r7, lr
 8000316:	0c22      	lsrs	r2, r4, #16
 8000318:	fb0e 7711 	mls	r7, lr, r1, r7
 800031c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000320:	fb01 f005 	mul.w	r0, r1, r5
 8000324:	4290      	cmp	r0, r2
 8000326:	d90a      	bls.n	800033e <__udivmoddi4+0x62>
 8000328:	eb1c 0202 	adds.w	r2, ip, r2
 800032c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000330:	f080 811c 	bcs.w	800056c <__udivmoddi4+0x290>
 8000334:	4290      	cmp	r0, r2
 8000336:	f240 8119 	bls.w	800056c <__udivmoddi4+0x290>
 800033a:	3902      	subs	r1, #2
 800033c:	4462      	add	r2, ip
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	b2a4      	uxth	r4, r4
 8000342:	fbb2 f0fe 	udiv	r0, r2, lr
 8000346:	fb0e 2210 	mls	r2, lr, r0, r2
 800034a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	42a5      	cmp	r5, r4
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x90>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f100 32ff 	add.w	r2, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x294>
 8000362:	42a5      	cmp	r5, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x294>
 8000368:	4464      	add	r4, ip
 800036a:	3802      	subs	r0, #2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0xa2>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xbc>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80ed 	beq.w	8000566 <__udivmoddi4+0x28a>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d149      	bne.n	8000434 <__udivmoddi4+0x158>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d302      	bcc.n	80003aa <__udivmoddi4+0xce>
 80003a4:	4282      	cmp	r2, r0
 80003a6:	f200 80f8 	bhi.w	800059a <__udivmoddi4+0x2be>
 80003aa:	1a84      	subs	r4, r0, r2
 80003ac:	eb65 0203 	sbc.w	r2, r5, r3
 80003b0:	2001      	movs	r0, #1
 80003b2:	4617      	mov	r7, r2
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d0e2      	beq.n	800037e <__udivmoddi4+0xa2>
 80003b8:	e9c6 4700 	strd	r4, r7, [r6]
 80003bc:	e7df      	b.n	800037e <__udivmoddi4+0xa2>
 80003be:	b902      	cbnz	r2, 80003c2 <__udivmoddi4+0xe6>
 80003c0:	deff      	udf	#255	; 0xff
 80003c2:	fab2 f382 	clz	r3, r2
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x210>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2101      	movs	r1, #1
 80003d8:	fbb2 f5f7 	udiv	r5, r2, r7
 80003dc:	fb07 2015 	mls	r0, r7, r5, r2
 80003e0:	0c22      	lsrs	r2, r4, #16
 80003e2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e6:	fb0e f005 	mul.w	r0, lr, r5
 80003ea:	4290      	cmp	r0, r2
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x124>
 80003ee:	eb1c 0202 	adds.w	r2, ip, r2
 80003f2:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x122>
 80003f8:	4290      	cmp	r0, r2
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2b8>
 80003fe:	4645      	mov	r5, r8
 8000400:	1a12      	subs	r2, r2, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb2 f0f7 	udiv	r0, r2, r7
 8000408:	fb07 2210 	mls	r2, r7, r0, r2
 800040c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x14e>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x14c>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2c2>
 8000428:	4610      	mov	r0, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000432:	e79f      	b.n	8000374 <__udivmoddi4+0x98>
 8000434:	f1c1 0720 	rsb	r7, r1, #32
 8000438:	408b      	lsls	r3, r1
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa05 f401 	lsl.w	r4, r5, r1
 8000446:	fa20 f307 	lsr.w	r3, r0, r7
 800044a:	40fd      	lsrs	r5, r7
 800044c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000450:	4323      	orrs	r3, r4
 8000452:	fbb5 f8f9 	udiv	r8, r5, r9
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	fb09 5518 	mls	r5, r9, r8, r5
 800045e:	0c1c      	lsrs	r4, r3, #16
 8000460:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000464:	fb08 f50e 	mul.w	r5, r8, lr
 8000468:	42a5      	cmp	r5, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	fa00 f001 	lsl.w	r0, r0, r1
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b0>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2b4>
 8000480:	42a5      	cmp	r5, r4
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2b4>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4464      	add	r4, ip
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	b29d      	uxth	r5, r3
 8000490:	fbb4 f3f9 	udiv	r3, r4, r9
 8000494:	fb09 4413 	mls	r4, r9, r3, r4
 8000498:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800049c:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1da>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2ac>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2ac>
 80004b2:	3b02      	subs	r3, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ba:	fba3 9502 	umull	r9, r5, r3, r2
 80004be:	eba4 040e 	sub.w	r4, r4, lr
 80004c2:	42ac      	cmp	r4, r5
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46ae      	mov	lr, r5
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x29c>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x298>
 80004cc:	b156      	cbz	r6, 80004e4 <__udivmoddi4+0x208>
 80004ce:	ebb0 0208 	subs.w	r2, r0, r8
 80004d2:	eb64 040e 	sbc.w	r4, r4, lr
 80004d6:	fa04 f707 	lsl.w	r7, r4, r7
 80004da:	40ca      	lsrs	r2, r1
 80004dc:	40cc      	lsrs	r4, r1
 80004de:	4317      	orrs	r7, r2
 80004e0:	e9c6 7400 	strd	r7, r4, [r6]
 80004e4:	4618      	mov	r0, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ec:	f1c3 0120 	rsb	r1, r3, #32
 80004f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f4:	fa20 f201 	lsr.w	r2, r0, r1
 80004f8:	fa25 f101 	lsr.w	r1, r5, r1
 80004fc:	409d      	lsls	r5, r3
 80004fe:	432a      	orrs	r2, r5
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb1 f0f7 	udiv	r0, r1, r7
 800050c:	fb07 1510 	mls	r5, r7, r0, r1
 8000510:	0c11      	lsrs	r1, r2, #16
 8000512:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000516:	fb00 f50e 	mul.w	r5, r0, lr
 800051a:	428d      	cmp	r5, r1
 800051c:	fa04 f403 	lsl.w	r4, r4, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x258>
 8000522:	eb1c 0101 	adds.w	r1, ip, r1
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b0>
 800052c:	428d      	cmp	r5, r1
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b0>
 8000530:	3802      	subs	r0, #2
 8000532:	4461      	add	r1, ip
 8000534:	1b49      	subs	r1, r1, r5
 8000536:	b292      	uxth	r2, r2
 8000538:	fbb1 f5f7 	udiv	r5, r1, r7
 800053c:	fb07 1115 	mls	r1, r7, r5, r1
 8000540:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000544:	fb05 f10e 	mul.w	r1, r5, lr
 8000548:	4291      	cmp	r1, r2
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x282>
 800054c:	eb1c 0202 	adds.w	r2, ip, r2
 8000550:	f105 38ff 	add.w	r8, r5, #4294967295
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2a8>
 8000556:	4291      	cmp	r1, r2
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2a8>
 800055a:	3d02      	subs	r5, #2
 800055c:	4462      	add	r2, ip
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0xfc>
 8000566:	4631      	mov	r1, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xa2>
 800056c:	4639      	mov	r1, r7
 800056e:	e6e6      	b.n	800033e <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x90>
 8000574:	4548      	cmp	r0, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f0>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000580:	3b01      	subs	r3, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f0>
 8000584:	4645      	mov	r5, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x282>
 8000588:	462b      	mov	r3, r5
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1da>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x258>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b0>
 8000594:	3d02      	subs	r5, #2
 8000596:	4462      	add	r2, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x124>
 800059a:	4608      	mov	r0, r1
 800059c:	e70a      	b.n	80003b4 <__udivmoddi4+0xd8>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x14e>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	463b      	mov	r3, r7
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <MX_ADC1_Init+0x80>)
 80005be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005ec:	4a0f      	ldr	r2, [pc, #60]	; (800062c <MX_ADC1_Init+0x84>)
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_ADC1_Init+0x7c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_ADC1_Init+0x7c>)
 8000606:	2201      	movs	r2, #1
 8000608:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_ADC1_Init+0x7c>)
 800060c:	f001 f874 	bl	80016f8 <HAL_ADC_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000616:	f000 fcc1 	bl	8000f9c <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000e8 	.word	0x200000e8
 8000628:	40012000 	.word	0x40012000
 800062c:	0f000001 	.word	0x0f000001

08000630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_ADC_MspInit+0x7c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d127      	bne.n	80006a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 800065c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000660:	6453      	str	r3, [r2, #68]	; 0x44
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_1_Pin;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_1_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_ADC_MspInit+0x84>)
 800069e:	f001 fd21 	bl	80020e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40012000 	.word	0x40012000
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000

080006b8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08c      	sub	sp, #48	; 0x30
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
 80006d2:	4b6d      	ldr	r3, [pc, #436]	; (8000888 <MX_GPIO_Init+0x1d0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a6c      	ldr	r2, [pc, #432]	; (8000888 <MX_GPIO_Init+0x1d0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b6a      	ldr	r3, [pc, #424]	; (8000888 <MX_GPIO_Init+0x1d0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	4b66      	ldr	r3, [pc, #408]	; (8000888 <MX_GPIO_Init+0x1d0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a65      	ldr	r2, [pc, #404]	; (8000888 <MX_GPIO_Init+0x1d0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b63      	ldr	r3, [pc, #396]	; (8000888 <MX_GPIO_Init+0x1d0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b5f      	ldr	r3, [pc, #380]	; (8000888 <MX_GPIO_Init+0x1d0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a5e      	ldr	r2, [pc, #376]	; (8000888 <MX_GPIO_Init+0x1d0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b5c      	ldr	r3, [pc, #368]	; (8000888 <MX_GPIO_Init+0x1d0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b58      	ldr	r3, [pc, #352]	; (8000888 <MX_GPIO_Init+0x1d0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a57      	ldr	r2, [pc, #348]	; (8000888 <MX_GPIO_Init+0x1d0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b55      	ldr	r3, [pc, #340]	; (8000888 <MX_GPIO_Init+0x1d0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b51      	ldr	r3, [pc, #324]	; (8000888 <MX_GPIO_Init+0x1d0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a50      	ldr	r2, [pc, #320]	; (8000888 <MX_GPIO_Init+0x1d0>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b4e      	ldr	r3, [pc, #312]	; (8000888 <MX_GPIO_Init+0x1d0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <MX_GPIO_Init+0x1d0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a49      	ldr	r2, [pc, #292]	; (8000888 <MX_GPIO_Init+0x1d0>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b47      	ldr	r3, [pc, #284]	; (8000888 <MX_GPIO_Init+0x1d0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f244 0181 	movw	r1, #16513	; 0x4081
 800077c:	4843      	ldr	r0, [pc, #268]	; (800088c <MX_GPIO_Init+0x1d4>)
 800077e:	f001 fe5d 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2140      	movs	r1, #64	; 0x40
 8000786:	4842      	ldr	r0, [pc, #264]	; (8000890 <MX_GPIO_Init+0x1d8>)
 8000788:	f001 fe58 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000792:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	483c      	ldr	r0, [pc, #240]	; (8000894 <MX_GPIO_Init+0x1dc>)
 80007a4:	f001 fc9e 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007a8:	2332      	movs	r3, #50	; 0x32
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b8:	230b      	movs	r3, #11
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4834      	ldr	r0, [pc, #208]	; (8000894 <MX_GPIO_Init+0x1dc>)
 80007c4:	f001 fc8e 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007c8:	2386      	movs	r3, #134	; 0x86
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d8:	230b      	movs	r3, #11
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	482d      	ldr	r0, [pc, #180]	; (8000898 <MX_GPIO_Init+0x1e0>)
 80007e4:	f001 fc7e 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4822      	ldr	r0, [pc, #136]	; (800088c <MX_GPIO_Init+0x1d4>)
 8000802:	f001 fc6f 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000818:	230b      	movs	r3, #11
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	481a      	ldr	r0, [pc, #104]	; (800088c <MX_GPIO_Init+0x1d4>)
 8000824:	f001 fc5e 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000828:	2340      	movs	r3, #64	; 0x40
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4814      	ldr	r0, [pc, #80]	; (8000890 <MX_GPIO_Init+0x1d8>)
 8000840:	f001 fc50 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	480e      	ldr	r0, [pc, #56]	; (8000890 <MX_GPIO_Init+0x1d8>)
 8000858:	f001 fc44 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800085c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800086e:	230b      	movs	r3, #11
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_GPIO_Init+0x1d8>)
 800087a:	f001 fc33 	bl	80020e4 <HAL_GPIO_Init>

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	; 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40020400 	.word	0x40020400
 8000890:	40021800 	.word	0x40021800
 8000894:	40020800 	.word	0x40020800
 8000898:	40020000 	.word	0x40020000

0800089c <main>:

/* USER CODE END 0 */


int main(void)
{
 800089c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008a0:	b09f      	sub	sp, #124	; 0x7c
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

   uint16_t sample = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
   arm_rfft_instance_q15 S;
   q15_t 	fftIn 	[ header.N	   	];		// guarda copia de samples en Q15 como in para la fft. La fft corrompe los datos de la entrada!
 80008aa:	4bd7      	ldr	r3, [pc, #860]	; (8000c08 <main+0x36c>)
 80008ac:	891e      	ldrh	r6, [r3, #8]
 80008ae:	4633      	mov	r3, r6
 80008b0:	3b01      	subs	r3, #1
 80008b2:	673b      	str	r3, [r7, #112]	; 0x70
 80008b4:	b2b3      	uxth	r3, r6
 80008b6:	2200      	movs	r2, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	4611      	mov	r1, r2
 80008bc:	f04f 0200 	mov.w	r2, #0
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	010b      	lsls	r3, r1, #4
 80008c6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80008ca:	0102      	lsls	r2, r0, #4
 80008cc:	b2b3      	uxth	r3, r6
 80008ce:	2200      	movs	r2, #0
 80008d0:	461c      	mov	r4, r3
 80008d2:	4615      	mov	r5, r2
 80008d4:	f04f 0200 	mov.w	r2, #0
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	012b      	lsls	r3, r5, #4
 80008de:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80008e2:	0122      	lsls	r2, r4, #4
 80008e4:	4633      	mov	r3, r6
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	3307      	adds	r3, #7
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	ebad 0d03 	sub.w	sp, sp, r3
 80008f2:	466b      	mov	r3, sp
 80008f4:	3301      	adds	r3, #1
 80008f6:	085b      	lsrs	r3, r3, #1
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   q15_t 	fftOut	[ header.N *2   ];		// salida de la fft
 80008fc:	4bc2      	ldr	r3, [pc, #776]	; (8000c08 <main+0x36c>)
 80008fe:	891b      	ldrh	r3, [r3, #8]
 8000900:	0059      	lsls	r1, r3, #1
 8000902:	1e4b      	subs	r3, r1, #1
 8000904:	66bb      	str	r3, [r7, #104]	; 0x68
 8000906:	460a      	mov	r2, r1
 8000908:	2300      	movs	r3, #0
 800090a:	4690      	mov	r8, r2
 800090c:	4699      	mov	r9, r3
 800090e:	f04f 0200 	mov.w	r2, #0
 8000912:	f04f 0300 	mov.w	r3, #0
 8000916:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800091a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800091e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000922:	460a      	mov	r2, r1
 8000924:	2300      	movs	r3, #0
 8000926:	61ba      	str	r2, [r7, #24]
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	f04f 0200 	mov.w	r2, #0
 800092e:	f04f 0300 	mov.w	r3, #0
 8000932:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000936:	4628      	mov	r0, r5
 8000938:	0103      	lsls	r3, r0, #4
 800093a:	4620      	mov	r0, r4
 800093c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000940:	4620      	mov	r0, r4
 8000942:	0102      	lsls	r2, r0, #4
 8000944:	460b      	mov	r3, r1
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	3307      	adds	r3, #7
 800094a:	08db      	lsrs	r3, r3, #3
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	ebad 0d03 	sub.w	sp, sp, r3
 8000952:	466b      	mov	r3, sp
 8000954:	3301      	adds	r3, #1
 8000956:	085b      	lsrs	r3, r3, #1
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	667b      	str	r3, [r7, #100]	; 0x64
   q15_t 	fftMag	[ header.N /2+1 ]; 		// magnitud de la FFT
 800095c:	4baa      	ldr	r3, [pc, #680]	; (8000c08 <main+0x36c>)
 800095e:	891b      	ldrh	r3, [r3, #8]
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	b29b      	uxth	r3, r3
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	1e4b      	subs	r3, r1, #1
 8000968:	663b      	str	r3, [r7, #96]	; 0x60
 800096a:	460a      	mov	r2, r1
 800096c:	2300      	movs	r3, #0
 800096e:	613a      	str	r2, [r7, #16]
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	f04f 0200 	mov.w	r2, #0
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800097e:	4628      	mov	r0, r5
 8000980:	0103      	lsls	r3, r0, #4
 8000982:	4620      	mov	r0, r4
 8000984:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000988:	4620      	mov	r0, r4
 800098a:	0102      	lsls	r2, r0, #4
 800098c:	460a      	mov	r2, r1
 800098e:	2300      	movs	r3, #0
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	f04f 0200 	mov.w	r2, #0
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80009a0:	4628      	mov	r0, r5
 80009a2:	0103      	lsls	r3, r0, #4
 80009a4:	4620      	mov	r0, r4
 80009a6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80009aa:	4620      	mov	r0, r4
 80009ac:	0102      	lsls	r2, r0, #4
 80009ae:	460b      	mov	r3, r1
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	3307      	adds	r3, #7
 80009b4:	08db      	lsrs	r3, r3, #3
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	ebad 0d03 	sub.w	sp, sp, r3
 80009bc:	466b      	mov	r3, sp
 80009be:	3301      	adds	r3, #1
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   int16_t 	adc 	[ header.N	   	];
 80009c6:	4b90      	ldr	r3, [pc, #576]	; (8000c08 <main+0x36c>)
 80009c8:	8919      	ldrh	r1, [r3, #8]
 80009ca:	460b      	mov	r3, r1
 80009cc:	3b01      	subs	r3, #1
 80009ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80009d0:	b28b      	uxth	r3, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	f04f 0200 	mov.w	r2, #0
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80009e4:	4628      	mov	r0, r5
 80009e6:	0103      	lsls	r3, r0, #4
 80009e8:	4620      	mov	r0, r4
 80009ea:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80009ee:	4620      	mov	r0, r4
 80009f0:	0102      	lsls	r2, r0, #4
 80009f2:	b28b      	uxth	r3, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	469a      	mov	sl, r3
 80009f8:	4693      	mov	fp, r2
 80009fa:	f04f 0200 	mov.w	r2, #0
 80009fe:	f04f 0300 	mov.w	r3, #0
 8000a02:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000a06:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000a0a:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000a0e:	460b      	mov	r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	3307      	adds	r3, #7
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	ebad 0d03 	sub.w	sp, sp, r3
 8000a1c:	466b      	mov	r3, sp
 8000a1e:	3301      	adds	r3, #1
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	657b      	str	r3, [r7, #84]	; 0x54
   char str[10];
   uint8_t c, indicePrimeraNota, indiceSegundaNota;
   uint16_t frecPrimeraNota, frecSegundaNota;
   float32_t dummy;

   temp = FREQ_MUESTREO/N_MUESTRAS*1000;
 8000a26:	f643 5309 	movw	r3, #15625	; 0x3d09
 8000a2a:	653b      	str	r3, [r7, #80]	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f000 fdce 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 fa4a 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff fe40 	bl	80006b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a38:	f000 fc50 	bl	80012dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a3c:	f000 fd14 	bl	8001468 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000a40:	f7ff fdb2 	bl	80005a8 <MX_ADC1_Init>
//  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  DBG_CyclesCounterInit(CLOCK_SPEED); // Enable the cycle counter
 8000a44:	4871      	ldr	r0, [pc, #452]	; (8000c0c <main+0x370>)
 8000a46:	f000 faf5 	bl	8001034 <DBG_CyclesCounterInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /* Reset cycle counter to 0 */
	  DBG_CyclesCounterReset();
 8000a4a:	4b71      	ldr	r3, [pc, #452]	; (8000c10 <main+0x374>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
//	  uartWriteByteArray ( &huart3, (uint8_t *)&adc[sample]			,sizeof(adc[0]) 	);	 	// envia el sample ANTERIOR
//	  uartWriteByteArray ( &huart3, (uint8_t*)&fftOut[sample*2]		,sizeof(fftOut[0])	); 		// envia la fft del sample ANTERIOR
//	  uartWriteByteArray ( &huart3, (uint8_t*)&fftOut[sample*2+1] 	,sizeof(fftOut[0])	); 		// envia la fft del sample ANTERIOR

	  /* Get the ADC sample */
	  adc[sample] = (((int16_t)ADC_Read(0)-512)>>(10-BITS))<<(6+10-BITS);
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 fac9 	bl	8000fe8 <ADC_Read>
 8000a56:	4603      	mov	r3, r0
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000a5e:	019b      	lsls	r3, r3, #6
 8000a60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000a64:	b219      	sxth	r1, r3
 8000a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a68:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	  fftIn[sample] = adc[sample];
 8000a6c:	f8b7 1076 	ldrh.w	r1, [r7, #118]	; 0x76
 8000a70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a76:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 8000a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	  /* Increment the sample counter and check if we are in the last sample */
	  if ( ++sample == header.N )
 8000a80:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000a84:	3301      	adds	r3, #1
 8000a86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8000a8a:	4b5f      	ldr	r3, [pc, #380]	; (8000c08 <main+0x36c>)
 8000a8c:	891b      	ldrh	r3, [r3, #8]
 8000a8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000a92:	429a      	cmp	r2, r3
 8000a94:	f040 8166 	bne.w	8000d64 <main+0x4c8>
	  {

		 /* Reset the samples */
		 sample = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

		 arm_rfft_init_q15		   ( &S		,header.N	  , 0				,1				  	); 	// inicializa una estructura que usa la funcion fft para procesar los datos. Notar el /2 para el largo
 8000a9e:	4b5a      	ldr	r3, [pc, #360]	; (8000c08 <main+0x36c>)
 8000aa0:	891b      	ldrh	r3, [r3, #8]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f003 fab8 	bl	8004020 <arm_rfft_init_q15>
		 arm_rfft_q15			   ( &S		,fftIn		  , fftOut							  	); 	// por fin.. ejecuta la rfft REAL fft
 8000ab0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ab4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ab6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fa55 	bl	8003f68 <arm_rfft_q15>
		 arm_cmplx_mag_squared_q15 ( fftOut ,fftMag		  , header.N/2+1						);
 8000abe:	4b52      	ldr	r3, [pc, #328]	; (8000c08 <main+0x36c>)
 8000ac0:	891b      	ldrh	r3, [r3, #8]
 8000ac2:	085b      	lsrs	r3, r3, #1
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	461a      	mov	r2, r3
 8000aca:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000acc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000ace:	f003 fb25 	bl	800411c <arm_cmplx_mag_squared_q15>
		 arm_max_q15			   ( fftMag ,header.N/2+1 , &header.maxValue, &header.maxIndex 	);
 8000ad2:	4b4d      	ldr	r3, [pc, #308]	; (8000c08 <main+0x36c>)
 8000ad4:	891b      	ldrh	r3, [r3, #8]
 8000ad6:	085b      	lsrs	r3, r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	3301      	adds	r3, #1
 8000adc:	4619      	mov	r1, r3
 8000ade:	4b4d      	ldr	r3, [pc, #308]	; (8000c14 <main+0x378>)
 8000ae0:	4a4d      	ldr	r2, [pc, #308]	; (8000c18 <main+0x37c>)
 8000ae2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000ae4:	f003 f98c 	bl	8003e00 <arm_max_q15>


         arm_q15_to_float(&header.maxValue, &dummy, 1);
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	4849      	ldr	r0, [pc, #292]	; (8000c18 <main+0x37c>)
 8000af2:	f003 f935 	bl	8003d60 <arm_q15_to_float>

         if(dummy*10000 >= POWER_THRESHOLD)
 8000af6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000afa:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000c1c <main+0x380>
 8000afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b02:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b0e:	f2c0 809b 	blt.w	8000c48 <main+0x3ac>
         {
        	 fftMag[header.maxIndex] = 0;
 8000b12:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <main+0x36c>)
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b18:	2100      	movs	r1, #0
 8000b1a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        	 fftMag[header.maxIndex - 1] = 0;
 8000b1e:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <main+0x36c>)
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	1e5a      	subs	r2, r3, #1
 8000b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b26:	2100      	movs	r1, #0
 8000b28:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        	 fftMag[header.maxIndex + 1] = 0;
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <main+0x36c>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b34:	2100      	movs	r1, #0
 8000b36:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        	 uartWriteByteArray(&huart3, (uint8_t*)str, uint32_to_string(header.maxIndex, str, 10));
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <main+0x36c>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b42:	220a      	movs	r2, #10
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f967 	bl	8000e18 <uint32_to_string>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4832      	ldr	r0, [pc, #200]	; (8000c20 <main+0x384>)
 8000b56:	f000 fa99 	bl	800108c <uartWriteByteArray>

    		 c = '\t';
 8000b5a:	2309      	movs	r3, #9
 8000b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             HAL_UART_Transmit(&huart3, &c, 1, HAL_MAX_DELAY);
 8000b60:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	2201      	movs	r2, #1
 8000b6a:	482d      	ldr	r0, [pc, #180]	; (8000c20 <main+0x384>)
 8000b6c:	f002 fa81 	bl	8003072 <HAL_UART_Transmit>

             frecPrimeraNota = temp*header.maxIndex/1000;
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <main+0x36c>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b76:	fb02 f303 	mul.w	r3, r2, r3
 8000b7a:	4a2a      	ldr	r2, [pc, #168]	; (8000c24 <main+0x388>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	099b      	lsrs	r3, r3, #6
 8000b82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    		 uartWriteByteArray(&huart3, (uint8_t*)str, uint32_to_string(frecPrimeraNota, str, 10));
 8000b86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b8e:	220a      	movs	r2, #10
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f941 	bl	8000e18 <uint32_to_string>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481f      	ldr	r0, [pc, #124]	; (8000c20 <main+0x384>)
 8000ba2:	f000 fa73 	bl	800108c <uartWriteByteArray>

    		 c = '\t';
 8000ba6:	2309      	movs	r3, #9
 8000ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             HAL_UART_Transmit(&huart3, &c, 1, HAL_MAX_DELAY);
 8000bac:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	481a      	ldr	r0, [pc, #104]	; (8000c20 <main+0x384>)
 8000bb8:	f002 fa5b 	bl	8003072 <HAL_UART_Transmit>

    		 uartWriteByteArray(&huart3, (uint8_t*)str, uint32_to_string((uint32_t)(dummy*10000), str, 10));
 8000bbc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bc0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000c1c <main+0x380>
 8000bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	ee17 0a90 	vmov	r0, s15
 8000bd8:	f000 f91e 	bl	8000e18 <uint32_to_string>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be4:	4619      	mov	r1, r3
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <main+0x384>)
 8000be8:	f000 fa50 	bl	800108c <uartWriteByteArray>


    		 indicePrimeraNota = hallarIndiceNota(frecPrimeraNota);
 8000bec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f8d5 	bl	8000da0 <hallarIndiceNota>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    		 c = '\t';
 8000bfc:	2309      	movs	r3, #9
 8000bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             HAL_UART_Transmit(&huart3, &c, 1, HAL_MAX_DELAY);
 8000c02:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000c06:	e00f      	b.n	8000c28 <main+0x38c>
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	0a037a00 	.word	0x0a037a00
 8000c10:	e0001000 	.word	0xe0001000
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	20000010 	.word	0x20000010
 8000c1c:	461c4000 	.word	0x461c4000
 8000c20:	20000134 	.word	0x20000134
 8000c24:	10624dd3 	.word	0x10624dd3
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4853      	ldr	r0, [pc, #332]	; (8000d7c <main+0x4e0>)
 8000c30:	f002 fa1f 	bl	8003072 <HAL_UART_Transmit>

    		 uartWriteByteArray(&huart3, (uint8_t*)stringNotasp[indicePrimeraNota], 2);
 8000c34:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000c38:	4a51      	ldr	r2, [pc, #324]	; (8000d80 <main+0x4e4>)
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4619      	mov	r1, r3
 8000c42:	484e      	ldr	r0, [pc, #312]	; (8000d7c <main+0x4e0>)
 8000c44:	f000 fa22 	bl	800108c <uartWriteByteArray>
         }

         arm_max_q15( fftMag ,header.N/2+1, &header.maxValue, &header.maxIndex);
 8000c48:	4b4e      	ldr	r3, [pc, #312]	; (8000d84 <main+0x4e8>)
 8000c4a:	891b      	ldrh	r3, [r3, #8]
 8000c4c:	085b      	lsrs	r3, r3, #1
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	3301      	adds	r3, #1
 8000c52:	4619      	mov	r1, r3
 8000c54:	4b4c      	ldr	r3, [pc, #304]	; (8000d88 <main+0x4ec>)
 8000c56:	4a4d      	ldr	r2, [pc, #308]	; (8000d8c <main+0x4f0>)
 8000c58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000c5a:	f003 f8d1 	bl	8003e00 <arm_max_q15>

		 c = '\t';
 8000c5e:	2309      	movs	r3, #9
 8000c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         HAL_UART_Transmit(&huart3, &c, 1, HAL_MAX_DELAY);
 8000c64:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4843      	ldr	r0, [pc, #268]	; (8000d7c <main+0x4e0>)
 8000c70:	f002 f9ff 	bl	8003072 <HAL_UART_Transmit>

         if(dummy*10000 >= POWER_THRESHOLD)
 8000c74:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c78:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8000d90 <main+0x4f4>
 8000c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c80:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c8c:	db68      	blt.n	8000d60 <main+0x4c4>
         {
        	 fftMag[header.maxIndex] = 0;
 8000c8e:	4b3d      	ldr	r3, [pc, #244]	; (8000d84 <main+0x4e8>)
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c94:	2100      	movs	r1, #0
 8000c96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        	 fftMag[header.maxIndex - 1] = 0;
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <main+0x4e8>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	1e5a      	subs	r2, r3, #1
 8000ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        	 fftMag[header.maxIndex + 1] = 0;
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <main+0x4e8>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        	 uartWriteByteArray(&huart3, (uint8_t*)str, uint32_to_string(header.maxIndex, str, 10));
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <main+0x4e8>)
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000cbe:	220a      	movs	r2, #10
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f8a9 	bl	8000e18 <uint32_to_string>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	482a      	ldr	r0, [pc, #168]	; (8000d7c <main+0x4e0>)
 8000cd2:	f000 f9db 	bl	800108c <uartWriteByteArray>

    		 c = '\t';
 8000cd6:	2309      	movs	r3, #9
 8000cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             HAL_UART_Transmit(&huart3, &c, 1, HAL_MAX_DELAY);
 8000cdc:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4825      	ldr	r0, [pc, #148]	; (8000d7c <main+0x4e0>)
 8000ce8:	f002 f9c3 	bl	8003072 <HAL_UART_Transmit>

    		 uartWriteByteArray(&huart3, (uint8_t*)str, uint32_to_string(temp*header.maxIndex/1000, str, 10));
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <main+0x4e8>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <main+0x4f8>)
 8000cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfc:	099b      	lsrs	r3, r3, #6
 8000cfe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d02:	220a      	movs	r2, #10
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f887 	bl	8000e18 <uint32_to_string>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4819      	ldr	r0, [pc, #100]	; (8000d7c <main+0x4e0>)
 8000d16:	f000 f9b9 	bl	800108c <uartWriteByteArray>

    		 c = '\t';
 8000d1a:	2309      	movs	r3, #9
 8000d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             HAL_UART_Transmit(&huart3, &c, 1, HAL_MAX_DELAY);
 8000d20:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <main+0x4e0>)
 8000d2c:	f002 f9a1 	bl	8003072 <HAL_UART_Transmit>

    		 uartWriteByteArray(&huart3, (uint8_t*)str, uint32_to_string((uint32_t)(dummy*10000), str, 10));
 8000d30:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d34:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000d90 <main+0x4f4>
 8000d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d44:	220a      	movs	r2, #10
 8000d46:	4619      	mov	r1, r3
 8000d48:	ee17 0a90 	vmov	r0, s15
 8000d4c:	f000 f864 	bl	8000e18 <uint32_to_string>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4808      	ldr	r0, [pc, #32]	; (8000d7c <main+0x4e0>)
 8000d5c:	f000 f996 	bl	800108c <uartWriteByteArray>

         }

		 transmitNewLine();
 8000d60:	f000 f83e 	bl	8000de0 <transmitNewLine>
//		 uartWriteByteArray (&huart3, (uint8_t*)&header, sizeof(header));

	  }

	  /* Wait until it completes the Cycles. 168.000.000/10.000 = 16.800 cycles */
	  while(DBG_CyclesCounterRead() < CLOCK_SPEED/header.fs);
 8000d64:	bf00      	nop
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <main+0x4fc>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <main+0x4e8>)
 8000d6c:	8952      	ldrh	r2, [r2, #10]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <main+0x500>)
 8000d72:	fb92 f2f1 	sdiv	r2, r2, r1
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d3f5      	bcc.n	8000d66 <main+0x4ca>
	  DBG_CyclesCounterReset();
 8000d7a:	e666      	b.n	8000a4a <main+0x1ae>
 8000d7c:	20000134 	.word	0x20000134
 8000d80:	20000030 	.word	0x20000030
 8000d84:	20000000 	.word	0x20000000
 8000d88:	2000000c 	.word	0x2000000c
 8000d8c:	20000010 	.word	0x20000010
 8000d90:	461c4000 	.word	0x461c4000
 8000d94:	10624dd3 	.word	0x10624dd3
 8000d98:	e0001000 	.word	0xe0001000
 8000d9c:	0a037a00 	.word	0x0a037a00

08000da0 <hallarIndiceNota>:
  }
  /* USER CODE END 3 */
}

uint8_t hallarIndiceNota(uint16_t frec)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
	uint8_t indiceNota = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73fb      	strb	r3, [r7, #15]

	while( abs(frec - frecNotas[indiceNota]) > 10 )
 8000dae:	e002      	b.n	8000db6 <hallarIndiceNota+0x16>
		indiceNota++;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	3301      	adds	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
	while( abs(frec - frecNotas[indiceNota]) > 10 )
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <hallarIndiceNota+0x3c>)
 8000dbc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000dc0:	1a9b      	subs	r3, r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	bfb8      	it	lt
 8000dc6:	425b      	neglt	r3, r3
 8000dc8:	2b0a      	cmp	r3, #10
 8000dca:	dcf1      	bgt.n	8000db0 <hallarIndiceNota+0x10>

	return indiceNota;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000018 	.word	0x20000018

08000de0 <transmitNewLine>:

void transmitNewLine(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	uint8_t c = 10;
 8000de6:	230a      	movs	r3, #10
 8000de8:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart3, &c, 1, HAL_MAX_DELAY);
 8000dea:	1df9      	adds	r1, r7, #7
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2201      	movs	r2, #1
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <transmitNewLine+0x34>)
 8000df4:	f002 f93d 	bl	8003072 <HAL_UART_Transmit>
	c = 13;
 8000df8:	230d      	movs	r3, #13
 8000dfa:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &c, 1, HAL_MAX_DELAY);
 8000dfc:	1df9      	adds	r1, r7, #7
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	2201      	movs	r2, #1
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <transmitNewLine+0x34>)
 8000e06:	f002 f934 	bl	8003072 <HAL_UART_Transmit>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000134 	.word	0x20000134

08000e18 <uint32_to_string>:
        // Espera hasta que el temporizador de conteo (SysTick) alcance el valor deseado
    }
}

uint8_t uint32_to_string(uint32_t value, char *buffer, size_t buffer_size)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
	uint8_t i, j, index = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	757b      	strb	r3, [r7, #21]

	// Verifica si el buffer es suficientemente grande para almacenar la cadena.
    if (buffer_size < 5)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d804      	bhi.n	8000e38 <uint32_to_string+0x20>
    {
        printf("El buffer no es lo suficientemente grande.\n");
 8000e2e:	4824      	ldr	r0, [pc, #144]	; (8000ec0 <uint32_to_string+0xa8>)
 8000e30:	f003 fe3a 	bl	8004aa8 <puts>
        return 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e03f      	b.n	8000eb8 <uint32_to_string+0xa0>
    }

	do {
		buffer[index++] = 48 + (value % 10);
 8000e38:	68f9      	ldr	r1, [r7, #12]
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <uint32_to_string+0xac>)
 8000e3c:	fba3 2301 	umull	r2, r3, r3, r1
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	1aca      	subs	r2, r1, r3
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	7d7b      	ldrb	r3, [r7, #21]
 8000e50:	1c59      	adds	r1, r3, #1
 8000e52:	7579      	strb	r1, [r7, #21]
 8000e54:	4619      	mov	r1, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	440b      	add	r3, r1
 8000e5a:	3230      	adds	r2, #48	; 0x30
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	701a      	strb	r2, [r3, #0]
		value /= 10;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <uint32_to_string+0xac>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	60fb      	str	r3, [r7, #12]
	} while (value > 0);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1e2      	bne.n	8000e38 <uint32_to_string+0x20>

//	 Invertir la cadena para obtener el orden correcto.
	for (i = 0, j = index - 1; i < j; i++, j--) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
 8000e76:	7d7b      	ldrb	r3, [r7, #21]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	75bb      	strb	r3, [r7, #22]
 8000e7c:	e017      	b.n	8000eae <uint32_to_string+0x96>
		char temp = buffer[i];
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	68ba      	ldr	r2, [r7, #8]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	753b      	strb	r3, [r7, #20]
		buffer[i] = buffer[j];
 8000e88:	7dbb      	ldrb	r3, [r7, #22]
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	441a      	add	r2, r3
 8000e8e:	7dfb      	ldrb	r3, [r7, #23]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	440b      	add	r3, r1
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	701a      	strb	r2, [r3, #0]
		buffer[j] = temp;
 8000e98:	7dbb      	ldrb	r3, [r7, #22]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	7d3a      	ldrb	r2, [r7, #20]
 8000ea0:	701a      	strb	r2, [r3, #0]
	for (i = 0, j = index - 1; i < j; i++, j--) {
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	75fb      	strb	r3, [r7, #23]
 8000ea8:	7dbb      	ldrb	r3, [r7, #22]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	75bb      	strb	r3, [r7, #22]
 8000eae:	7dfa      	ldrb	r2, [r7, #23]
 8000eb0:	7dbb      	ldrb	r3, [r7, #22]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d3e3      	bcc.n	8000e7e <uint32_to_string+0x66>
	}

	return index;
 8000eb6:	7d7b      	ldrb	r3, [r7, #21]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	08005218 	.word	0x08005218
 8000ec4:	cccccccd 	.word	0xcccccccd

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2230      	movs	r2, #48	; 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 fec6 	bl	8004c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <SystemClock_Config+0xcc>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f3c:	23a8      	movs	r3, #168	; 0xa8
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f44:	2307      	movs	r3, #7
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 fbab 	bl	80026a8 <HAL_RCC_OscConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f58:	f000 f820 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2105      	movs	r1, #5
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fe0c 	bl	8002b98 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f86:	f000 f809 	bl	8000f9c <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	; 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <ADC_SelectCH0>:
}adc_e;

static uint32_t ClockSpeed = CLOCK_SPEED;

void ADC_SelectCH0(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <ADC_SelectCH0+0x3c>)
 8000fcc:	f000 fd76 	bl	8001abc <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <ADC_SelectCH0+0x32>
	{
		Error_Handler();
 8000fd6:	f7ff ffe1 	bl	8000f9c <Error_Handler>
	}
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000e8 	.word	0x200000e8

08000fe8 <ADC_Read>:

uint16_t ADC_Read(uint16_t adc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
	uint16_t adc_value;
	switch(adc){
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <ADC_Read+0x16>
		case CH0:
			ADC_SelectCH0();
 8000ff8:	f7ff ffd6 	bl	8000fa8 <ADC_SelectCH0>
		break;
 8000ffc:	e002      	b.n	8001004 <ADC_Read+0x1c>
		default:
			ADC_SelectCH0();
 8000ffe:	f7ff ffd3 	bl	8000fa8 <ADC_SelectCH0>
		break;
 8001002:	bf00      	nop
	}

	HAL_ADC_Start(&hadc1);
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <ADC_Read+0x48>)
 8001006:	f000 fbbb 	bl	8001780 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800100a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800100e:	4808      	ldr	r0, [pc, #32]	; (8001030 <ADC_Read+0x48>)
 8001010:	f000 fcbb 	bl	800198a <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8001014:	4806      	ldr	r0, [pc, #24]	; (8001030 <ADC_Read+0x48>)
 8001016:	f000 fd43 	bl	8001aa0 <HAL_ADC_GetValue>
 800101a:	4603      	mov	r3, r0
 800101c:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop(&hadc1);
 800101e:	4804      	ldr	r0, [pc, #16]	; (8001030 <ADC_Read+0x48>)
 8001020:	f000 fc80 	bl	8001924 <HAL_ADC_Stop>
	return adc_value;
 8001024:	89fb      	ldrh	r3, [r7, #14]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000e8 	.word	0x200000e8

08001034 <DBG_CyclesCounterInit>:


bool DBG_CyclesCounterInit( uint32_t clockSpeed )
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <DBG_CyclesCounterInit+0x28>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
   //Iniciar el contador de ciclos de clock.
   DWT->CTRL  |= 1; // *DWT_CTRL  |= 1;
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <DBG_CyclesCounterInit+0x2c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a06      	ldr	r2, [pc, #24]	; (8001060 <DBG_CyclesCounterInit+0x2c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6013      	str	r3, [r2, #0]
   return 1;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000060 	.word	0x20000060
 8001060:	e0001000 	.word	0xe0001000

08001064 <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( UART_HandleTypeDef *huart, const uint8_t value)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
	uint8_t val = value;
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart, &val, 1, HAL_MAX_DELAY);
 8001074:	f107 010f 	add.w	r1, r7, #15
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	2201      	movs	r2, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f001 fff7 	bl	8003072 <HAL_UART_Transmit>
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <uartWriteByteArray>:


// Blocking, Send a Byte Array
void uartWriteByteArray( UART_HandleTypeDef *huart, const uint8_t* byteArray, uint32_t byteArrayLen )
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
   uint32_t i = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
   for( i=0; i<byteArrayLen; i++ ) {
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	e00a      	b.n	80010b8 <uartWriteByteArray+0x2c>
	   uartWriteByte(huart, byteArray[i]);
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff ffd9 	bl	8001064 <uartWriteByte>
   for( i=0; i<byteArrayLen; i++ ) {
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d3f0      	bcc.n	80010a2 <uartWriteByteArray+0x16>
   }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 fa82 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e00a      	b.n	8001198 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001182:	f3af 8000 	nop.w
 8001186:	4601      	mov	r1, r0
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	60ba      	str	r2, [r7, #8]
 800118e:	b2ca      	uxtb	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbf0      	blt.n	8001182 <_read+0x12>
  }

  return len;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	e009      	b.n	80011d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	60ba      	str	r2, [r7, #8]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbf1      	blt.n	80011bc <_write+0x12>
  }
  return len;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_close>:

int _close(int file)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800120a:	605a      	str	r2, [r3, #4]
  return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_isatty>:

int _isatty(int file)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <_sbrk+0x5c>)
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_sbrk+0x60>)
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <_sbrk+0x64>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <_sbrk+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	429a      	cmp	r2, r3
 800127a:	d207      	bcs.n	800128c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800127c:	f003 fd42 	bl	8004d04 <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e009      	b.n	80012a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20030000 	.word	0x20030000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	20000130 	.word	0x20000130
 80012b4:	200007d8 	.word	0x200007d8

080012b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <SystemInit+0x20>)
 80012be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <SystemInit+0x20>)
 80012c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_USART3_UART_Init+0x4c>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_USART3_UART_Init+0x50>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_USART3_UART_Init+0x4c>)
 80012e8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80012ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_USART3_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_USART3_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_USART3_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_USART3_UART_Init+0x4c>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USART3_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USART3_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_USART3_UART_Init+0x4c>)
 8001314:	f001 fe60 	bl	8002fd8 <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800131e:	f7ff fe3d 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000134 	.word	0x20000134
 800132c:	40004800 	.word	0x40004800

08001330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a41      	ldr	r2, [pc, #260]	; (8001454 <HAL_UART_MspInit+0x124>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d14a      	bne.n	80013e8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	4b40      	ldr	r3, [pc, #256]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a3f      	ldr	r2, [pc, #252]	; (8001458 <HAL_UART_MspInit+0x128>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a38      	ldr	r2, [pc, #224]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a31      	ldr	r2, [pc, #196]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_UART_MspInit+0x128>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = UART2_RX_Pin;
 80013a6:	2308      	movs	r3, #8
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b6:	2307      	movs	r3, #7
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART2_RX_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	4826      	ldr	r0, [pc, #152]	; (800145c <HAL_UART_MspInit+0x12c>)
 80013c2:	f000 fe8f 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART2_TX_Pin;
 80013c6:	2320      	movs	r3, #32
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d6:	2307      	movs	r3, #7
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART2_TX_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <HAL_UART_MspInit+0x130>)
 80013e2:	f000 fe7f 	bl	80020e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013e6:	e031      	b.n	800144c <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_UART_MspInit+0x134>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12c      	bne.n	800144c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_UART_MspInit+0x128>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_UART_MspInit+0x128>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a10      	ldr	r2, [pc, #64]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_UART_MspInit+0x128>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800142a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800143c:	2307      	movs	r3, #7
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <HAL_UART_MspInit+0x130>)
 8001448:	f000 fe4c 	bl	80020e4 <HAL_GPIO_Init>
}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40004400 	.word	0x40004400
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40004800 	.word	0x40004800

08001468 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001472:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001476:	2204      	movs	r2, #4
 8001478:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147c:	2202      	movs	r2, #2
 800147e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001488:	2202      	movs	r2, #2
 800148a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148e:	2201      	movs	r2, #1
 8001490:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ac:	f000 ffdf 	bl	800246e <HAL_PCD_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014b6:	f7ff fd71 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000178 	.word	0x20000178

080014c4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e4:	d13f      	bne.n	8001566 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_PCD_MspInit+0xac>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a20      	ldr	r2, [pc, #128]	; (8001570 <HAL_PCD_MspInit+0xac>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_PCD_MspInit+0xac>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001502:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001514:	230a      	movs	r3, #10
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4815      	ldr	r0, [pc, #84]	; (8001574 <HAL_PCD_MspInit+0xb0>)
 8001520:	f000 fde0 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	480e      	ldr	r0, [pc, #56]	; (8001574 <HAL_PCD_MspInit+0xb0>)
 800153a:	f000 fdd3 	bl	80020e4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_PCD_MspInit+0xac>)
 8001540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_PCD_MspInit+0xac>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001548:	6353      	str	r3, [r2, #52]	; 0x34
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_PCD_MspInit+0xac>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_PCD_MspInit+0xac>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_PCD_MspInit+0xac>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800157e:	490e      	ldr	r1, [pc, #56]	; (80015b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001580:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001594:	4c0b      	ldr	r4, [pc, #44]	; (80015c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015a2:	f7ff fe89 	bl	80012b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f003 fbb3 	bl	8004d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff f977 	bl	800089c <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80015bc:	080170c4 	.word	0x080170c4
  ldr r2, =_sbss
 80015c0:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80015c4:	200007d4 	.word	0x200007d4

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <HAL_Init+0x40>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_Init+0x40>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x40>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 fd41 	bl	800207c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fd64 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fd4b 	bl	80020ca <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 fd21 	bl	8002092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000064 	.word	0x20000064
 8001668:	2000006c 	.word	0x2000006c
 800166c:	20000068 	.word	0x20000068

08001670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x20>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x24>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_IncTick+0x24>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	2000006c 	.word	0x2000006c
 8001694:	20000684 	.word	0x20000684

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000684 	.word	0x20000684

080016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff ffee 	bl	8001698 <HAL_GetTick>
 80016bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d005      	beq.n	80016d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_Delay+0x44>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016d6:	bf00      	nop
 80016d8:	f7ff ffde 	bl	8001698 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d8f7      	bhi.n	80016d8 <HAL_Delay+0x28>
  {
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000006c 	.word	0x2000006c

080016f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e033      	b.n	8001776 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7fe ff8a 	bl	8000630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b00      	cmp	r3, #0
 8001734:	d118      	bne.n	8001768 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800173e:	f023 0302 	bic.w	r3, r3, #2
 8001742:	f043 0202 	orr.w	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fae8 	bl	8001d20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f023 0303 	bic.w	r3, r3, #3
 800175e:	f043 0201 	orr.w	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
 8001766:	e001      	b.n	800176c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_ADC_Start+0x1a>
 8001796:	2302      	movs	r3, #2
 8001798:	e0b2      	b.n	8001900 <HAL_ADC_Start+0x180>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d018      	beq.n	80017e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017c0:	4b52      	ldr	r3, [pc, #328]	; (800190c <HAL_ADC_Start+0x18c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a52      	ldr	r2, [pc, #328]	; (8001910 <HAL_ADC_Start+0x190>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	0c9a      	lsrs	r2, r3, #18
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017d4:	e002      	b.n	80017dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d17a      	bne.n	80018e6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800181a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182e:	d106      	bne.n	800183e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	f023 0206 	bic.w	r2, r3, #6
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	645a      	str	r2, [r3, #68]	; 0x44
 800183c:	e002      	b.n	8001844 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_ADC_Start+0x194>)
 800184e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001858:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2b00      	cmp	r3, #0
 8001864:	d12a      	bne.n	80018bc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <HAL_ADC_Start+0x198>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d015      	beq.n	800189c <HAL_ADC_Start+0x11c>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a29      	ldr	r2, [pc, #164]	; (800191c <HAL_ADC_Start+0x19c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d105      	bne.n	8001886 <HAL_ADC_Start+0x106>
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_ADC_Start+0x194>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00a      	beq.n	800189c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a25      	ldr	r2, [pc, #148]	; (8001920 <HAL_ADC_Start+0x1a0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d136      	bne.n	80018fe <HAL_ADC_Start+0x17e>
 8001890:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_ADC_Start+0x194>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d130      	bne.n	80018fe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d129      	bne.n	80018fe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	e020      	b.n	80018fe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <HAL_ADC_Start+0x198>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11b      	bne.n	80018fe <HAL_ADC_Start+0x17e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d114      	bne.n	80018fe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e00b      	b.n	80018fe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f043 0201 	orr.w	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	20000064 	.word	0x20000064
 8001910:	431bde83 	.word	0x431bde83
 8001914:	40012300 	.word	0x40012300
 8001918:	40012000 	.word	0x40012000
 800191c:	40012100 	.word	0x40012100
 8001920:	40012200 	.word	0x40012200

08001924 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_ADC_Stop+0x16>
 8001936:	2302      	movs	r3, #2
 8001938:	e021      	b.n	800197e <HAL_ADC_Stop+0x5a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d109      	bne.n	8001974 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a6:	d113      	bne.n	80019d0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b6:	d10b      	bne.n	80019d0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f043 0220 	orr.w	r2, r3, #32
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e063      	b.n	8001a98 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019d0:	f7ff fe62 	bl	8001698 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019d6:	e021      	b.n	8001a1c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019de:	d01d      	beq.n	8001a1c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_ADC_PollForConversion+0x6c>
 80019e6:	f7ff fe57 	bl	8001698 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d212      	bcs.n	8001a1c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d00b      	beq.n	8001a1c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f043 0204 	orr.w	r2, r3, #4
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e03d      	b.n	8001a98 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d1d6      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f06f 0212 	mvn.w	r2, #18
 8001a32:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d123      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d11f      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d111      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d105      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f043 0201 	orr.w	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1c>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e113      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x244>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b09      	cmp	r3, #9
 8001ae6:	d925      	bls.n	8001b34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68d9      	ldr	r1, [r3, #12]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	3b1e      	subs	r3, #30
 8001afe:	2207      	movs	r2, #7
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43da      	mvns	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68d9      	ldr	r1, [r3, #12]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4603      	mov	r3, r0
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4403      	add	r3, r0
 8001b26:	3b1e      	subs	r3, #30
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	e022      	b.n	8001b7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6919      	ldr	r1, [r3, #16]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	2207      	movs	r2, #7
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	400a      	ands	r2, r1
 8001b56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6919      	ldr	r1, [r3, #16]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4403      	add	r3, r0
 8001b70:	409a      	lsls	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d824      	bhi.n	8001bcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	3b05      	subs	r3, #5
 8001b94:	221f      	movs	r2, #31
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b05      	subs	r3, #5
 8001bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bca:	e04c      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d824      	bhi.n	8001c1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	3b23      	subs	r3, #35	; 0x23
 8001be6:	221f      	movs	r2, #31
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43da      	mvns	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b23      	subs	r3, #35	; 0x23
 8001c10:	fa00 f203 	lsl.w	r2, r0, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1c:	e023      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b41      	subs	r3, #65	; 0x41
 8001c30:	221f      	movs	r2, #31
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3b41      	subs	r3, #65	; 0x41
 8001c5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <HAL_ADC_ConfigChannel+0x250>)
 8001c68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a28      	ldr	r2, [pc, #160]	; (8001d10 <HAL_ADC_ConfigChannel+0x254>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d10f      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1d8>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b12      	cmp	r3, #18
 8001c7a:	d10b      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_ADC_ConfigChannel+0x254>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d12b      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x23a>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_ADC_ConfigChannel+0x258>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d003      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0x1f4>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b11      	cmp	r3, #17
 8001cae:	d122      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_ADC_ConfigChannel+0x258>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d111      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_ADC_ConfigChannel+0x25c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_ADC_ConfigChannel+0x260>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	0c9a      	lsrs	r2, r3, #18
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce8:	e002      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f9      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40012300 	.word	0x40012300
 8001d10:	40012000 	.word	0x40012000
 8001d14:	10000012 	.word	0x10000012
 8001d18:	20000064 	.word	0x20000064
 8001d1c:	431bde83 	.word	0x431bde83

08001d20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d28:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <ADC_Init+0x1f0>)
 8001d2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	021a      	lsls	r2, r3, #8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6899      	ldr	r1, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <ADC_Init+0x1f4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d022      	beq.n	8001dfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6899      	ldr	r1, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6899      	ldr	r1, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	e00f      	b.n	8001e1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0202 	bic.w	r2, r2, #2
 8001e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6899      	ldr	r1, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7e1b      	ldrb	r3, [r3, #24]
 8001e38:	005a      	lsls	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6859      	ldr	r1, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	3b01      	subs	r3, #1
 8001e78:	035a      	lsls	r2, r3, #13
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	e007      	b.n	8001e94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	051a      	lsls	r2, r3, #20
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6899      	ldr	r1, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ed6:	025a      	lsls	r2, r3, #9
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6899      	ldr	r1, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	029a      	lsls	r2, r3, #10
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	609a      	str	r2, [r3, #8]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40012300 	.word	0x40012300
 8001f14:	0f000001 	.word	0x0f000001

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002048:	d301      	bcc.n	800204e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204a:	2301      	movs	r3, #1
 800204c:	e00f      	b.n	800206e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <SysTick_Config+0x40>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002056:	210f      	movs	r1, #15
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f7ff ff8e 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <SysTick_Config+0x40>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <SysTick_Config+0x40>)
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff47 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a4:	f7ff ff5c 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f7ff ff8e 	bl	8001fd0 <NVIC_EncodePriority>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff5d 	bl	8001f7c <__NVIC_SetPriority>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffb0 	bl	8002038 <SysTick_Config>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e177      	b.n	80023f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8166 	bne.w	80023ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d005      	beq.n	8002136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	2b02      	cmp	r3, #2
 8002134:	d130      	bne.n	8002198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0201 	and.w	r2, r3, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d017      	beq.n	80021d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d123      	bne.n	8002228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80c0 	beq.w	80023ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_GPIO_Init+0x324>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a65      	ldr	r2, [pc, #404]	; (8002408 <HAL_GPIO_Init+0x324>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_GPIO_Init+0x324>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002286:	4a61      	ldr	r2, [pc, #388]	; (800240c <HAL_GPIO_Init+0x328>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_GPIO_Init+0x32c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d037      	beq.n	8002322 <HAL_GPIO_Init+0x23e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a57      	ldr	r2, [pc, #348]	; (8002414 <HAL_GPIO_Init+0x330>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d031      	beq.n	800231e <HAL_GPIO_Init+0x23a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a56      	ldr	r2, [pc, #344]	; (8002418 <HAL_GPIO_Init+0x334>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02b      	beq.n	800231a <HAL_GPIO_Init+0x236>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a55      	ldr	r2, [pc, #340]	; (800241c <HAL_GPIO_Init+0x338>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d025      	beq.n	8002316 <HAL_GPIO_Init+0x232>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a54      	ldr	r2, [pc, #336]	; (8002420 <HAL_GPIO_Init+0x33c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <HAL_GPIO_Init+0x22e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a53      	ldr	r2, [pc, #332]	; (8002424 <HAL_GPIO_Init+0x340>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d019      	beq.n	800230e <HAL_GPIO_Init+0x22a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_GPIO_Init+0x344>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x226>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a51      	ldr	r2, [pc, #324]	; (800242c <HAL_GPIO_Init+0x348>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x222>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a50      	ldr	r2, [pc, #320]	; (8002430 <HAL_GPIO_Init+0x34c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x21e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4f      	ldr	r2, [pc, #316]	; (8002434 <HAL_GPIO_Init+0x350>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x21a>
 80022fa:	2309      	movs	r3, #9
 80022fc:	e012      	b.n	8002324 <HAL_GPIO_Init+0x240>
 80022fe:	230a      	movs	r3, #10
 8002300:	e010      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002302:	2308      	movs	r3, #8
 8002304:	e00e      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002306:	2307      	movs	r3, #7
 8002308:	e00c      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800230a:	2306      	movs	r3, #6
 800230c:	e00a      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800230e:	2305      	movs	r3, #5
 8002310:	e008      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002312:	2304      	movs	r3, #4
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002316:	2303      	movs	r3, #3
 8002318:	e004      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800231a:	2302      	movs	r3, #2
 800231c:	e002      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002322:	2300      	movs	r3, #0
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	f002 0203 	and.w	r2, r2, #3
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	4093      	lsls	r3, r2
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002334:	4935      	ldr	r1, [pc, #212]	; (800240c <HAL_GPIO_Init+0x328>)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002342:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_GPIO_Init+0x354>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002366:	4a34      	ldr	r2, [pc, #208]	; (8002438 <HAL_GPIO_Init+0x354>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800236c:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_GPIO_Init+0x354>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002390:	4a29      	ldr	r2, [pc, #164]	; (8002438 <HAL_GPIO_Init+0x354>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_GPIO_Init+0x354>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ba:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <HAL_GPIO_Init+0x354>)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_GPIO_Init+0x354>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_GPIO_Init+0x354>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3301      	adds	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b0f      	cmp	r3, #15
 80023f4:	f67f ae84 	bls.w	8002100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40013800 	.word	0x40013800
 8002410:	40020000 	.word	0x40020000
 8002414:	40020400 	.word	0x40020400
 8002418:	40020800 	.word	0x40020800
 800241c:	40020c00 	.word	0x40020c00
 8002420:	40021000 	.word	0x40021000
 8002424:	40021400 	.word	0x40021400
 8002428:	40021800 	.word	0x40021800
 800242c:	40021c00 	.word	0x40021c00
 8002430:	40022000 	.word	0x40022000
 8002434:	40022400 	.word	0x40022400
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002458:	e003      	b.n	8002462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	041a      	lsls	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800246e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002470:	b08f      	sub	sp, #60	; 0x3c
 8002472:	af0a      	add	r7, sp, #40	; 0x28
 8002474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e10f      	b.n	80026a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff f812 	bl	80014c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2203      	movs	r2, #3
 80024a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 f9ad 	bl	800381e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	687e      	ldr	r6, [r7, #4]
 80024cc:	466d      	mov	r5, sp
 80024ce:	f106 0410 	add.w	r4, r6, #16
 80024d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024de:	e885 0003 	stmia.w	r5, {r0, r1}
 80024e2:	1d33      	adds	r3, r6, #4
 80024e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e6:	6838      	ldr	r0, [r7, #0]
 80024e8:	f001 f938 	bl	800375c <USB_CoreInit>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0d0      	b.n	80026a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f001 f99b 	bl	8003840 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e04a      	b.n	80025a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	333d      	adds	r3, #61	; 0x3d
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	333c      	adds	r3, #60	; 0x3c
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	b298      	uxth	r0, r3
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3344      	adds	r3, #68	; 0x44
 800254c:	4602      	mov	r2, r0
 800254e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3340      	adds	r3, #64	; 0x40
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3348      	adds	r3, #72	; 0x48
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	334c      	adds	r3, #76	; 0x4c
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	3354      	adds	r3, #84	; 0x54
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	3301      	adds	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3af      	bcc.n	8002510 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e044      	b.n	8002640 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	3301      	adds	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3b5      	bcc.n	80025b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	687e      	ldr	r6, [r7, #4]
 8002652:	466d      	mov	r5, sp
 8002654:	f106 0410 	add.w	r4, r6, #16
 8002658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002660:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002664:	e885 0003 	stmia.w	r5, {r0, r1}
 8002668:	1d33      	adds	r3, r6, #4
 800266a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266c:	6838      	ldr	r0, [r7, #0]
 800266e:	f001 f933 	bl	80038d8 <USB_DevInit>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e00d      	b.n	80026a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f001 fafe 	bl	8003c9a <USB_DevDisconnect>

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e267      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d075      	beq.n	80027b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d00c      	beq.n	80026ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d2:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b7e      	ldr	r3, [pc, #504]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05b      	beq.n	80027b0 <HAL_RCC_OscConfig+0x108>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d157      	bne.n	80027b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e242      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x74>
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a75      	ldr	r2, [pc, #468]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e01d      	b.n	8002758 <HAL_RCC_OscConfig+0xb0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x98>
 8002726:	4b70      	ldr	r3, [pc, #448]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6f      	ldr	r2, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6c      	ldr	r2, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0xb0>
 8002740:	4b69      	ldr	r3, [pc, #420]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a68      	ldr	r2, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a65      	ldr	r2, [pc, #404]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7fe ff9a 	bl	8001698 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7fe ff96 	bl	8001698 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e207      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0xc0>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe ff86 	bl	8001698 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002790:	f7fe ff82 	bl	8001698 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1f3      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0xe8>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d063      	beq.n	8002886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d11c      	bne.n	8002810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_RCC_OscConfig+0x152>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1c7      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4937      	ldr	r1, [pc, #220]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	e03a      	b.n	8002886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe ff3b 	bl	8001698 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002826:	f7fe ff37 	bl	8001698 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1a8      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4925      	ldr	r1, [pc, #148]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e015      	b.n	8002886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe ff1a 	bl	8001698 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002868:	f7fe ff16 	bl	8001698 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e187      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d036      	beq.n	8002900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_RCC_OscConfig+0x248>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe fefa 	bl	8001698 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a8:	f7fe fef6 	bl	8001698 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e167      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80028bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x200>
 80028c6:	e01b      	b.n	8002900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_OscConfig+0x248>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7fe fee3 	bl	8001698 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	e00e      	b.n	80028f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d6:	f7fe fedf 	bl	8001698 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d907      	bls.n	80028f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e150      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
 80028e8:	40023800 	.word	0x40023800
 80028ec:	42470000 	.word	0x42470000
 80028f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ea      	bne.n	80028d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8097 	beq.w	8002a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b81      	ldr	r3, [pc, #516]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b7d      	ldr	r3, [pc, #500]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a7c      	ldr	r2, [pc, #496]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b7a      	ldr	r3, [pc, #488]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293a:	2301      	movs	r3, #1
 800293c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b77      	ldr	r3, [pc, #476]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d118      	bne.n	800297c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294a:	4b74      	ldr	r3, [pc, #464]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a73      	ldr	r2, [pc, #460]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7fe fe9f 	bl	8001698 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7fe fe9b 	bl	8001698 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e10c      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002970:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x2ea>
 8002984:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a63      	ldr	r2, [pc, #396]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
 8002990:	e01c      	b.n	80029cc <HAL_RCC_OscConfig+0x324>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x30c>
 800299a:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
 80029a6:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a5b      	ldr	r2, [pc, #364]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0x324>
 80029b4:	4b58      	ldr	r3, [pc, #352]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a57      	ldr	r2, [pc, #348]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	4b55      	ldr	r3, [pc, #340]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a54      	ldr	r2, [pc, #336]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029c6:	f023 0304 	bic.w	r3, r3, #4
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d015      	beq.n	8002a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fe60 	bl	8001698 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fe5c 	bl	8001698 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0cb      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0ee      	beq.n	80029dc <HAL_RCC_OscConfig+0x334>
 80029fe:	e014      	b.n	8002a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fe4a 	bl	8001698 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe fe46 	bl	8001698 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0b5      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1e:	4b3e      	ldr	r3, [pc, #248]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ee      	bne.n	8002a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	4a38      	ldr	r2, [pc, #224]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80a1 	beq.w	8002b88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a46:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d05c      	beq.n	8002b0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d141      	bne.n	8002ade <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <HAL_RCC_OscConfig+0x478>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe fe1a 	bl	8001698 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe fe16 	bl	8001698 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e087      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	019b      	lsls	r3, r3, #6
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	491b      	ldr	r1, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x478>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fdef 	bl	8001698 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe fdeb 	bl	8001698 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e05c      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x416>
 8002adc:	e054      	b.n	8002b88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_OscConfig+0x478>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fdd8 	bl	8001698 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fdd4 	bl	8001698 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e045      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x444>
 8002b0a:	e03d      	b.n	8002b88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e038      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_RCC_OscConfig+0x4ec>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d028      	beq.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d121      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d11a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b54:	4013      	ands	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d111      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0cc      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d90c      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b65      	ldr	r3, [pc, #404]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0b8      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	494d      	ldr	r1, [pc, #308]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d044      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d119      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e067      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4934      	ldr	r1, [pc, #208]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7fe fd06 	bl	8001698 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c90:	f7fe fd02 	bl	8001698 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e04f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 020c 	and.w	r2, r3, #12
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1eb      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d20c      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e032      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4916      	ldr	r1, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	490e      	ldr	r1, [pc, #56]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1e:	f000 f821 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	490a      	ldr	r1, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fc66 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00
 8002d54:	40023800 	.word	0x40023800
 8002d58:	08005244 	.word	0x08005244
 8002d5c:	20000064 	.word	0x20000064
 8002d60:	20000068 	.word	0x20000068

08002d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d68:	b094      	sub	sp, #80	; 0x50
 8002d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d70:	2300      	movs	r3, #0
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d74:	2300      	movs	r3, #0
 8002d76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d7c:	4b79      	ldr	r3, [pc, #484]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d00d      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	f200 80e1 	bhi.w	8002f50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x34>
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d96:	e0db      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b73      	ldr	r3, [pc, #460]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d9c:	e0db      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d9e:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x208>)
 8002da0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da2:	e0d8      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da4:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dae:	4b6d      	ldr	r3, [pc, #436]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d063      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dba:	4b6a      	ldr	r3, [pc, #424]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dce:	2300      	movs	r3, #0
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	462b      	mov	r3, r5
 8002dda:	f04f 0000 	mov.w	r0, #0
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	0159      	lsls	r1, r3, #5
 8002de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de8:	0150      	lsls	r0, r2, #5
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4621      	mov	r1, r4
 8002df0:	1a51      	subs	r1, r2, r1
 8002df2:	6139      	str	r1, [r7, #16]
 8002df4:	4629      	mov	r1, r5
 8002df6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e08:	4659      	mov	r1, fp
 8002e0a:	018b      	lsls	r3, r1, #6
 8002e0c:	4651      	mov	r1, sl
 8002e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e12:	4651      	mov	r1, sl
 8002e14:	018a      	lsls	r2, r1, #6
 8002e16:	4651      	mov	r1, sl
 8002e18:	ebb2 0801 	subs.w	r8, r2, r1
 8002e1c:	4659      	mov	r1, fp
 8002e1e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e36:	4690      	mov	r8, r2
 8002e38:	4699      	mov	r9, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	eb18 0303 	adds.w	r3, r8, r3
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	462b      	mov	r3, r5
 8002e44:	eb49 0303 	adc.w	r3, r9, r3
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e56:	4629      	mov	r1, r5
 8002e58:	024b      	lsls	r3, r1, #9
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e60:	4621      	mov	r1, r4
 8002e62:	024a      	lsls	r2, r1, #9
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e74:	f7fd fa1a 	bl	80002ac <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e80:	e058      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	2200      	movs	r2, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	2300      	movs	r3, #0
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	f04f 0000 	mov.w	r0, #0
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	0159      	lsls	r1, r3, #5
 8002eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eae:	0150      	lsls	r0, r2, #5
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eba:	4649      	mov	r1, r9
 8002ebc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ecc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ed0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ed4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ed8:	eb63 050b 	sbc.w	r5, r3, fp
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	00eb      	lsls	r3, r5, #3
 8002ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eea:	00e2      	lsls	r2, r4, #3
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	18e3      	adds	r3, r4, r3
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	464b      	mov	r3, r9
 8002ef8:	eb45 0303 	adc.w	r3, r5, r3
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	028b      	lsls	r3, r1, #10
 8002f0e:	4621      	mov	r1, r4
 8002f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f14:	4621      	mov	r1, r4
 8002f16:	028a      	lsls	r2, r1, #10
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	61fa      	str	r2, [r7, #28]
 8002f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f28:	f7fd f9c0 	bl	80002ac <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4613      	mov	r3, r2
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f4e:	e002      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3750      	adds	r7, #80	; 0x50
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	00f42400 	.word	0x00f42400
 8002f6c:	007a1200 	.word	0x007a1200

08002f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000064 	.word	0x20000064

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f8c:	f7ff fff0 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0a9b      	lsrs	r3, r3, #10
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	08005254 	.word	0x08005254

08002fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fb4:	f7ff ffdc 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0b5b      	lsrs	r3, r3, #13
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4903      	ldr	r1, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	08005254 	.word	0x08005254

08002fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e03f      	b.n	800306a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe f996 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2224      	movs	r2, #36	; 0x24
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800301a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f929 	bl	8003274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b08a      	sub	sp, #40	; 0x28
 8003076:	af02      	add	r7, sp, #8
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b20      	cmp	r3, #32
 8003090:	d17c      	bne.n	800318c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_UART_Transmit+0x2c>
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e075      	b.n	800318e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_UART_Transmit+0x3e>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e06e      	b.n	800318e <HAL_UART_Transmit+0x11c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2221      	movs	r2, #33	; 0x21
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030c6:	f7fe fae7 	bl	8001698 <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e0:	d108      	bne.n	80030f4 <HAL_UART_Transmit+0x82>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d104      	bne.n	80030f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	e003      	b.n	80030fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003104:	e02a      	b.n	800315c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2200      	movs	r2, #0
 800310e:	2180      	movs	r1, #128	; 0x80
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f840 	bl	8003196 <UART_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e036      	b.n	800318e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003134:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	3302      	adds	r3, #2
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	e007      	b.n	800314e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3301      	adds	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1cf      	bne.n	8003106 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	2140      	movs	r1, #64	; 0x40
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f810 	bl	8003196 <UART_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e006      	b.n	800318e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b090      	sub	sp, #64	; 0x40
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	4613      	mov	r3, r2
 80031a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a6:	e050      	b.n	800324a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d04c      	beq.n	800324a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80031b6:	f7fe fa6f 	bl	8001698 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d241      	bcs.n	800324a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031e6:	637a      	str	r2, [r7, #52]	; 0x34
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e5      	bne.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3314      	adds	r3, #20
 8003200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	613b      	str	r3, [r7, #16]
   return(result);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	63bb      	str	r3, [r7, #56]	; 0x38
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3314      	adds	r3, #20
 8003218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800321a:	623a      	str	r2, [r7, #32]
 800321c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	69f9      	ldr	r1, [r7, #28]
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	61bb      	str	r3, [r7, #24]
   return(result);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e5      	bne.n	80031fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e00f      	b.n	800326a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4013      	ands	r3, r2
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	429a      	cmp	r2, r3
 8003266:	d09f      	beq.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3740      	adds	r7, #64	; 0x40
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003278:	b0c0      	sub	sp, #256	; 0x100
 800327a:	af00      	add	r7, sp, #0
 800327c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	68d9      	ldr	r1, [r3, #12]
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	ea40 0301 	orr.w	r3, r0, r1
 800329c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032cc:	f021 010c 	bic.w	r1, r1, #12
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032da:	430b      	orrs	r3, r1
 80032dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ee:	6999      	ldr	r1, [r3, #24]
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	ea40 0301 	orr.w	r3, r0, r1
 80032fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b8f      	ldr	r3, [pc, #572]	; (8003540 <UART_SetConfig+0x2cc>)
 8003304:	429a      	cmp	r2, r3
 8003306:	d005      	beq.n	8003314 <UART_SetConfig+0xa0>
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b8d      	ldr	r3, [pc, #564]	; (8003544 <UART_SetConfig+0x2d0>)
 8003310:	429a      	cmp	r2, r3
 8003312:	d104      	bne.n	800331e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003314:	f7ff fe4c 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8003318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800331c:	e003      	b.n	8003326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800331e:	f7ff fe33 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8003322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003330:	f040 810c 	bne.w	800354c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003338:	2200      	movs	r2, #0
 800333a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800333e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003346:	4622      	mov	r2, r4
 8003348:	462b      	mov	r3, r5
 800334a:	1891      	adds	r1, r2, r2
 800334c:	65b9      	str	r1, [r7, #88]	; 0x58
 800334e:	415b      	adcs	r3, r3
 8003350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003356:	4621      	mov	r1, r4
 8003358:	eb12 0801 	adds.w	r8, r2, r1
 800335c:	4629      	mov	r1, r5
 800335e:	eb43 0901 	adc.w	r9, r3, r1
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800336e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003376:	4690      	mov	r8, r2
 8003378:	4699      	mov	r9, r3
 800337a:	4623      	mov	r3, r4
 800337c:	eb18 0303 	adds.w	r3, r8, r3
 8003380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003384:	462b      	mov	r3, r5
 8003386:	eb49 0303 	adc.w	r3, r9, r3
 800338a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800339a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800339e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033a2:	460b      	mov	r3, r1
 80033a4:	18db      	adds	r3, r3, r3
 80033a6:	653b      	str	r3, [r7, #80]	; 0x50
 80033a8:	4613      	mov	r3, r2
 80033aa:	eb42 0303 	adc.w	r3, r2, r3
 80033ae:	657b      	str	r3, [r7, #84]	; 0x54
 80033b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033b8:	f7fc ff78 	bl	80002ac <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4b61      	ldr	r3, [pc, #388]	; (8003548 <UART_SetConfig+0x2d4>)
 80033c2:	fba3 2302 	umull	r2, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	011c      	lsls	r4, r3, #4
 80033ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033dc:	4642      	mov	r2, r8
 80033de:	464b      	mov	r3, r9
 80033e0:	1891      	adds	r1, r2, r2
 80033e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80033e4:	415b      	adcs	r3, r3
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033ec:	4641      	mov	r1, r8
 80033ee:	eb12 0a01 	adds.w	sl, r2, r1
 80033f2:	4649      	mov	r1, r9
 80033f4:	eb43 0b01 	adc.w	fp, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800340c:	4692      	mov	sl, r2
 800340e:	469b      	mov	fp, r3
 8003410:	4643      	mov	r3, r8
 8003412:	eb1a 0303 	adds.w	r3, sl, r3
 8003416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800341a:	464b      	mov	r3, r9
 800341c:	eb4b 0303 	adc.w	r3, fp, r3
 8003420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003438:	460b      	mov	r3, r1
 800343a:	18db      	adds	r3, r3, r3
 800343c:	643b      	str	r3, [r7, #64]	; 0x40
 800343e:	4613      	mov	r3, r2
 8003440:	eb42 0303 	adc.w	r3, r2, r3
 8003444:	647b      	str	r3, [r7, #68]	; 0x44
 8003446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800344a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800344e:	f7fc ff2d 	bl	80002ac <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4611      	mov	r1, r2
 8003458:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <UART_SetConfig+0x2d4>)
 800345a:	fba3 2301 	umull	r2, r3, r3, r1
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2264      	movs	r2, #100	; 0x64
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	1acb      	subs	r3, r1, r3
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800346e:	4b36      	ldr	r3, [pc, #216]	; (8003548 <UART_SetConfig+0x2d4>)
 8003470:	fba3 2302 	umull	r2, r3, r3, r2
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800347c:	441c      	add	r4, r3
 800347e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800348c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	1891      	adds	r1, r2, r2
 8003496:	63b9      	str	r1, [r7, #56]	; 0x38
 8003498:	415b      	adcs	r3, r3
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034a0:	4641      	mov	r1, r8
 80034a2:	1851      	adds	r1, r2, r1
 80034a4:	6339      	str	r1, [r7, #48]	; 0x30
 80034a6:	4649      	mov	r1, r9
 80034a8:	414b      	adcs	r3, r1
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034b8:	4659      	mov	r1, fp
 80034ba:	00cb      	lsls	r3, r1, #3
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c2:	4651      	mov	r1, sl
 80034c4:	00ca      	lsls	r2, r1, #3
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	4642      	mov	r2, r8
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034d4:	464b      	mov	r3, r9
 80034d6:	460a      	mov	r2, r1
 80034d8:	eb42 0303 	adc.w	r3, r2, r3
 80034dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034f4:	460b      	mov	r3, r1
 80034f6:	18db      	adds	r3, r3, r3
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fa:	4613      	mov	r3, r2
 80034fc:	eb42 0303 	adc.w	r3, r2, r3
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800350a:	f7fc fecf 	bl	80002ac <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <UART_SetConfig+0x2d4>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a08      	ldr	r2, [pc, #32]	; (8003548 <UART_SetConfig+0x2d4>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 0207 	and.w	r2, r3, #7
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4422      	add	r2, r4
 800353a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800353c:	e106      	b.n	800374c <UART_SetConfig+0x4d8>
 800353e:	bf00      	nop
 8003540:	40011000 	.word	0x40011000
 8003544:	40011400 	.word	0x40011400
 8003548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800354c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003550:	2200      	movs	r2, #0
 8003552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800355a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800355e:	4642      	mov	r2, r8
 8003560:	464b      	mov	r3, r9
 8003562:	1891      	adds	r1, r2, r2
 8003564:	6239      	str	r1, [r7, #32]
 8003566:	415b      	adcs	r3, r3
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800356e:	4641      	mov	r1, r8
 8003570:	1854      	adds	r4, r2, r1
 8003572:	4649      	mov	r1, r9
 8003574:	eb43 0501 	adc.w	r5, r3, r1
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	00eb      	lsls	r3, r5, #3
 8003582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003586:	00e2      	lsls	r2, r4, #3
 8003588:	4614      	mov	r4, r2
 800358a:	461d      	mov	r5, r3
 800358c:	4643      	mov	r3, r8
 800358e:	18e3      	adds	r3, r4, r3
 8003590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003594:	464b      	mov	r3, r9
 8003596:	eb45 0303 	adc.w	r3, r5, r3
 800359a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035ba:	4629      	mov	r1, r5
 80035bc:	008b      	lsls	r3, r1, #2
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c4:	4621      	mov	r1, r4
 80035c6:	008a      	lsls	r2, r1, #2
 80035c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035cc:	f7fc fe6e 	bl	80002ac <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4b60      	ldr	r3, [pc, #384]	; (8003758 <UART_SetConfig+0x4e4>)
 80035d6:	fba3 2302 	umull	r2, r3, r3, r2
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	011c      	lsls	r4, r3, #4
 80035de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035f0:	4642      	mov	r2, r8
 80035f2:	464b      	mov	r3, r9
 80035f4:	1891      	adds	r1, r2, r2
 80035f6:	61b9      	str	r1, [r7, #24]
 80035f8:	415b      	adcs	r3, r3
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003600:	4641      	mov	r1, r8
 8003602:	1851      	adds	r1, r2, r1
 8003604:	6139      	str	r1, [r7, #16]
 8003606:	4649      	mov	r1, r9
 8003608:	414b      	adcs	r3, r1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003618:	4659      	mov	r1, fp
 800361a:	00cb      	lsls	r3, r1, #3
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003622:	4651      	mov	r1, sl
 8003624:	00ca      	lsls	r2, r1, #3
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	4603      	mov	r3, r0
 800362c:	4642      	mov	r2, r8
 800362e:	189b      	adds	r3, r3, r2
 8003630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003634:	464b      	mov	r3, r9
 8003636:	460a      	mov	r2, r1
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	67bb      	str	r3, [r7, #120]	; 0x78
 800364a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003658:	4649      	mov	r1, r9
 800365a:	008b      	lsls	r3, r1, #2
 800365c:	4641      	mov	r1, r8
 800365e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003662:	4641      	mov	r1, r8
 8003664:	008a      	lsls	r2, r1, #2
 8003666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800366a:	f7fc fe1f 	bl	80002ac <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4611      	mov	r1, r2
 8003674:	4b38      	ldr	r3, [pc, #224]	; (8003758 <UART_SetConfig+0x4e4>)
 8003676:	fba3 2301 	umull	r2, r3, r3, r1
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2264      	movs	r2, #100	; 0x64
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	1acb      	subs	r3, r1, r3
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	3332      	adds	r3, #50	; 0x32
 8003688:	4a33      	ldr	r2, [pc, #204]	; (8003758 <UART_SetConfig+0x4e4>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003694:	441c      	add	r4, r3
 8003696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800369a:	2200      	movs	r2, #0
 800369c:	673b      	str	r3, [r7, #112]	; 0x70
 800369e:	677a      	str	r2, [r7, #116]	; 0x74
 80036a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036a4:	4642      	mov	r2, r8
 80036a6:	464b      	mov	r3, r9
 80036a8:	1891      	adds	r1, r2, r2
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	415b      	adcs	r3, r3
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b4:	4641      	mov	r1, r8
 80036b6:	1851      	adds	r1, r2, r1
 80036b8:	6039      	str	r1, [r7, #0]
 80036ba:	4649      	mov	r1, r9
 80036bc:	414b      	adcs	r3, r1
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036cc:	4659      	mov	r1, fp
 80036ce:	00cb      	lsls	r3, r1, #3
 80036d0:	4651      	mov	r1, sl
 80036d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d6:	4651      	mov	r1, sl
 80036d8:	00ca      	lsls	r2, r1, #3
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	4642      	mov	r2, r8
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036e6:	464b      	mov	r3, r9
 80036e8:	460a      	mov	r2, r1
 80036ea:	eb42 0303 	adc.w	r3, r2, r3
 80036ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	663b      	str	r3, [r7, #96]	; 0x60
 80036fa:	667a      	str	r2, [r7, #100]	; 0x64
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003708:	4649      	mov	r1, r9
 800370a:	008b      	lsls	r3, r1, #2
 800370c:	4641      	mov	r1, r8
 800370e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003712:	4641      	mov	r1, r8
 8003714:	008a      	lsls	r2, r1, #2
 8003716:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800371a:	f7fc fdc7 	bl	80002ac <__aeabi_uldivmod>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <UART_SetConfig+0x4e4>)
 8003724:	fba3 1302 	umull	r1, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2164      	movs	r1, #100	; 0x64
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	3332      	adds	r3, #50	; 0x32
 8003736:	4a08      	ldr	r2, [pc, #32]	; (8003758 <UART_SetConfig+0x4e4>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f003 020f 	and.w	r2, r3, #15
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4422      	add	r2, r4
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003752:	46bd      	mov	sp, r7
 8003754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003758:	51eb851f 	.word	0x51eb851f

0800375c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800375c:	b084      	sub	sp, #16
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	f107 001c 	add.w	r0, r7, #28
 800376a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	2b01      	cmp	r3, #1
 8003772:	d122      	bne.n	80037ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800379c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 faa2 	bl	8003cf8 <USB_CoreReset>
 80037b4:	4603      	mov	r3, r0
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e01a      	b.n	80037f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa96 	bl	8003cf8 <USB_CoreReset>
 80037cc:	4603      	mov	r3, r0
 80037ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
 80037e2:	e005      	b.n	80037f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d10b      	bne.n	800380e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f043 0206 	orr.w	r2, r3, #6
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800381a:	b004      	add	sp, #16
 800381c:	4770      	bx	lr

0800381e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 0201 	bic.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d115      	bne.n	800388e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800386e:	2001      	movs	r0, #1
 8003870:	f7fd ff1e 	bl	80016b0 <HAL_Delay>
      ms++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fa2e 	bl	8003cdc <USB_GetMode>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d01e      	beq.n	80038c4 <USB_SetCurrentMode+0x84>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b31      	cmp	r3, #49	; 0x31
 800388a:	d9f0      	bls.n	800386e <USB_SetCurrentMode+0x2e>
 800388c:	e01a      	b.n	80038c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d115      	bne.n	80038c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038a0:	2001      	movs	r0, #1
 80038a2:	f7fd ff05 	bl	80016b0 <HAL_Delay>
      ms++;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3301      	adds	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa15 	bl	8003cdc <USB_GetMode>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <USB_SetCurrentMode+0x84>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b31      	cmp	r3, #49	; 0x31
 80038bc:	d9f0      	bls.n	80038a0 <USB_SetCurrentMode+0x60>
 80038be:	e001      	b.n	80038c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e005      	b.n	80038d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b32      	cmp	r3, #50	; 0x32
 80038c8:	d101      	bne.n	80038ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038d8:	b084      	sub	sp, #16
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	e009      	b.n	800390c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	3340      	adds	r3, #64	; 0x40
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	2200      	movs	r2, #0
 8003904:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3301      	adds	r3, #1
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b0e      	cmp	r3, #14
 8003910:	d9f2      	bls.n	80038f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d11c      	bne.n	8003952 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003926:	f043 0302 	orr.w	r3, r3, #2
 800392a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
 8003950:	e00b      	b.n	800396a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003970:	461a      	mov	r2, r3
 8003972:	2300      	movs	r3, #0
 8003974:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397c:	4619      	mov	r1, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003984:	461a      	mov	r2, r3
 8003986:	680b      	ldr	r3, [r1, #0]
 8003988:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10c      	bne.n	80039aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003996:	2100      	movs	r1, #0
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f965 	bl	8003c68 <USB_SetDevSpeed>
 800399e:	e008      	b.n	80039b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039a0:	2101      	movs	r1, #1
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f960 	bl	8003c68 <USB_SetDevSpeed>
 80039a8:	e003      	b.n	80039b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039aa:	2103      	movs	r1, #3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f95b 	bl	8003c68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039b2:	2110      	movs	r1, #16
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f8f3 	bl	8003ba0 <USB_FlushTxFifo>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f91f 	bl	8003c08 <USB_FlushRxFifo>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039da:	461a      	mov	r2, r3
 80039dc:	2300      	movs	r3, #0
 80039de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e6:	461a      	mov	r2, r3
 80039e8:	2300      	movs	r3, #0
 80039ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	e043      	b.n	8003a86 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a14:	d118      	bne.n	8003a48 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e013      	b.n	8003a5a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e008      	b.n	8003a5a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a54:	461a      	mov	r2, r3
 8003a56:	2300      	movs	r3, #0
 8003a58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a66:	461a      	mov	r2, r3
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	3301      	adds	r3, #1
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d3b7      	bcc.n	80039fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	e043      	b.n	8003b1c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aaa:	d118      	bne.n	8003ade <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e013      	b.n	8003af0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	e008      	b.n	8003af0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	461a      	mov	r2, r3
 8003afe:	2300      	movs	r3, #0
 8003b00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d3b7      	bcc.n	8003a94 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f043 0210 	orr.w	r2, r3, #16
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <USB_DevInit+0x2c4>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f043 0208 	orr.w	r2, r3, #8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b84:	f043 0304 	orr.w	r3, r3, #4
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b98:	b004      	add	sp, #16
 8003b9a:	4770      	bx	lr
 8003b9c:	803c3800 	.word	0x803c3800

08003ba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <USB_FlushTxFifo+0x64>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e01b      	b.n	8003bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	daf2      	bge.n	8003bae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	019b      	lsls	r3, r3, #6
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <USB_FlushTxFifo+0x64>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e006      	b.n	8003bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d0f0      	beq.n	8003bd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	00030d40 	.word	0x00030d40

08003c08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4a11      	ldr	r2, [pc, #68]	; (8003c64 <USB_FlushRxFifo+0x5c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e018      	b.n	8003c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	daf2      	bge.n	8003c14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2210      	movs	r2, #16
 8003c36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <USB_FlushRxFifo+0x5c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e006      	b.n	8003c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d0f0      	beq.n	8003c38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	00030d40 	.word	0x00030d40

08003c68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003cb4:	f023 0303 	bic.w	r3, r3, #3
 8003cb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc8:	f043 0302 	orr.w	r3, r3, #2
 8003ccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3301      	adds	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <USB_CoreReset+0x64>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e01b      	b.n	8003d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	daf2      	bge.n	8003d04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3301      	adds	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <USB_CoreReset+0x64>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d901      	bls.n	8003d40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e006      	b.n	8003d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d0f0      	beq.n	8003d2e <USB_CoreReset+0x36>

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	00030d40 	.word	0x00030d40

08003d60 <arm_q15_to_float>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	0896      	lsrs	r6, r2, #2
 8003d64:	d038      	beq.n	8003dd8 <arm_q15_to_float+0x78>
 8003d66:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003dfc <arm_q15_to_float+0x9c>
 8003d6a:	f101 0410 	add.w	r4, r1, #16
 8003d6e:	f100 0308 	add.w	r3, r0, #8
 8003d72:	4635      	mov	r5, r6
 8003d74:	f933 ec08 	ldrsh.w	lr, [r3, #-8]
 8003d78:	ee07 ea90 	vmov	s15, lr
 8003d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d80:	3d01      	subs	r5, #1
 8003d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d86:	f103 0308 	add.w	r3, r3, #8
 8003d8a:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003d8e:	f933 ec0e 	ldrsh.w	lr, [r3, #-14]
 8003d92:	ee07 ea90 	vmov	s15, lr
 8003d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9a:	f104 0410 	add.w	r4, r4, #16
 8003d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da2:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8003da6:	f933 ec0c 	ldrsh.w	lr, [r3, #-12]
 8003daa:	ee07 ea90 	vmov	s15, lr
 8003dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db6:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8003dba:	f933 ec0a 	ldrsh.w	lr, [r3, #-10]
 8003dbe:	ee07 ea90 	vmov	s15, lr
 8003dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dca:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8003dce:	d1d1      	bne.n	8003d74 <arm_q15_to_float+0x14>
 8003dd0:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8003dd4:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8003dd8:	f012 0203 	ands.w	r2, r2, #3
 8003ddc:	d00d      	beq.n	8003dfa <arm_q15_to_float+0x9a>
 8003dde:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003dfc <arm_q15_to_float+0x9c>
 8003de2:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dee:	3a01      	subs	r2, #1
 8003df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003df4:	ece1 7a01 	vstmia	r1!, {s15}
 8003df8:	d1f3      	bne.n	8003de2 <arm_q15_to_float+0x82>
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
 8003dfc:	38000000 	.word	0x38000000

08003e00 <arm_max_q15>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	f101 3cff 	add.w	ip, r1, #4294967295
 8003e08:	ea5f 0a9c 	movs.w	sl, ip, lsr #2
 8003e0c:	f100 0902 	add.w	r9, r0, #2
 8003e10:	f9b0 4000 	ldrsh.w	r4, [r0]
 8003e14:	d04a      	beq.n	8003eac <arm_max_q15+0xac>
 8003e16:	300a      	adds	r0, #10
 8003e18:	46d0      	mov	r8, sl
 8003e1a:	f04f 0e04 	mov.w	lr, #4
 8003e1e:	2700      	movs	r7, #0
 8003e20:	f930 5c08 	ldrsh.w	r5, [r0, #-8]
 8003e24:	f930 bc06 	ldrsh.w	fp, [r0, #-6]
 8003e28:	f1ae 0603 	sub.w	r6, lr, #3
 8003e2c:	42a5      	cmp	r5, r4
 8003e2e:	bfc8      	it	gt
 8003e30:	4637      	movgt	r7, r6
 8003e32:	42ac      	cmp	r4, r5
 8003e34:	bfb8      	it	lt
 8003e36:	462c      	movlt	r4, r5
 8003e38:	f1ae 0502 	sub.w	r5, lr, #2
 8003e3c:	455c      	cmp	r4, fp
 8003e3e:	bfb8      	it	lt
 8003e40:	462f      	movlt	r7, r5
 8003e42:	455c      	cmp	r4, fp
 8003e44:	bfb8      	it	lt
 8003e46:	465c      	movlt	r4, fp
 8003e48:	f930 6c04 	ldrsh.w	r6, [r0, #-4]
 8003e4c:	4625      	mov	r5, r4
 8003e4e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8003e52:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 8003e56:	42b5      	cmp	r5, r6
 8003e58:	bfb8      	it	lt
 8003e5a:	465f      	movlt	r7, fp
 8003e5c:	42b5      	cmp	r5, r6
 8003e5e:	bfb8      	it	lt
 8003e60:	4635      	movlt	r5, r6
 8003e62:	42a5      	cmp	r5, r4
 8003e64:	bfb8      	it	lt
 8003e66:	4677      	movlt	r7, lr
 8003e68:	42ac      	cmp	r4, r5
 8003e6a:	bfb8      	it	lt
 8003e6c:	462c      	movlt	r4, r5
 8003e6e:	f1b8 0801 	subs.w	r8, r8, #1
 8003e72:	f100 0008 	add.w	r0, r0, #8
 8003e76:	f10e 0e04 	add.w	lr, lr, #4
 8003e7a:	d1d1      	bne.n	8003e20 <arm_max_q15+0x20>
 8003e7c:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
 8003e80:	f01c 0c03 	ands.w	ip, ip, #3
 8003e84:	d014      	beq.n	8003eb0 <arm_max_q15+0xb0>
 8003e86:	ebcc 0c01 	rsb	ip, ip, r1
 8003e8a:	f939 0b02 	ldrsh.w	r0, [r9], #2
 8003e8e:	42a0      	cmp	r0, r4
 8003e90:	bfc8      	it	gt
 8003e92:	4667      	movgt	r7, ip
 8003e94:	42a0      	cmp	r0, r4
 8003e96:	f10c 0c01 	add.w	ip, ip, #1
 8003e9a:	bfb8      	it	lt
 8003e9c:	4620      	movlt	r0, r4
 8003e9e:	4561      	cmp	r1, ip
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	d1f2      	bne.n	8003e8a <arm_max_q15+0x8a>
 8003ea4:	8010      	strh	r0, [r2, #0]
 8003ea6:	601f      	str	r7, [r3, #0]
 8003ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eac:	4657      	mov	r7, sl
 8003eae:	e7e7      	b.n	8003e80 <arm_max_q15+0x80>
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	e7f7      	b.n	8003ea4 <arm_max_q15+0xa4>

08003eb4 <arm_split_rfft_q15>:
 8003eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
 8003ebe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003ec0:	9001      	str	r0, [sp, #4]
 8003ec2:	3c01      	subs	r4, #1
 8003ec4:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8003ec8:	00a0      	lsls	r0, r4, #2
 8003eca:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8003ece:	3901      	subs	r1, #1
 8003ed0:	9000      	str	r0, [sp, #0]
 8003ed2:	4452      	add	r2, sl
 8003ed4:	4453      	add	r3, sl
 8003ed6:	d02f      	beq.n	8003f38 <arm_split_rfft_q15+0x84>
 8003ed8:	f100 0904 	add.w	r9, r0, #4
 8003edc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ede:	9c01      	ldr	r4, [sp, #4]
 8003ee0:	f1ae 0e08 	sub.w	lr, lr, #8
 8003ee4:	4486      	add	lr, r0
 8003ee6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ee8:	44a1      	add	r9, r4
 8003eea:	f100 0808 	add.w	r8, r0, #8
 8003eee:	46a3      	mov	fp, r4
 8003ef0:	f04f 0c00 	mov.w	ip, #0
 8003ef4:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 8003ef8:	f852 000c 	ldr.w	r0, [r2, ip]
 8003efc:	fb44 f500 	smusd	r5, r4, r0
 8003f00:	f859 6d04 	ldr.w	r6, [r9, #-4]!
 8003f04:	f853 700c 	ldr.w	r7, [r3, ip]
 8003f08:	fb26 5507 	smlad	r5, r6, r7, r5
 8003f0c:	fb46 f617 	smusdx	r6, r6, r7
 8003f10:	fb24 6010 	smladx	r0, r4, r0, r6
 8003f14:	1400      	asrs	r0, r0, #16
 8003f16:	142c      	asrs	r4, r5, #16
 8003f18:	4246      	negs	r6, r0
 8003f1a:	3901      	subs	r1, #1
 8003f1c:	f828 0c02 	strh.w	r0, [r8, #-2]
 8003f20:	f828 4c04 	strh.w	r4, [r8, #-4]
 8003f24:	44d4      	add	ip, sl
 8003f26:	f8ae 6006 	strh.w	r6, [lr, #6]
 8003f2a:	f8ae 4004 	strh.w	r4, [lr, #4]
 8003f2e:	f108 0804 	add.w	r8, r8, #4
 8003f32:	f1ae 0e04 	sub.w	lr, lr, #4
 8003f36:	d1dd      	bne.n	8003ef4 <arm_split_rfft_q15+0x40>
 8003f38:	9801      	ldr	r0, [sp, #4]
 8003f3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003f3c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003f40:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003f44:	9900      	ldr	r1, [sp, #0]
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	4421      	add	r1, r4
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	105b      	asrs	r3, r3, #1
 8003f4e:	808b      	strh	r3, [r1, #4]
 8003f50:	80ca      	strh	r2, [r1, #6]
 8003f52:	f9b0 1000 	ldrsh.w	r1, [r0]
 8003f56:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8003f5a:	8062      	strh	r2, [r4, #2]
 8003f5c:	440b      	add	r3, r1
 8003f5e:	105b      	asrs	r3, r3, #1
 8003f60:	8023      	strh	r3, [r4, #0]
 8003f62:	b003      	add	sp, #12
 8003f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003f68 <arm_rfft_q15>:
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	4616      	mov	r6, r2
 8003f6e:	7902      	ldrb	r2, [r0, #4]
 8003f70:	6804      	ldr	r4, [r0, #0]
 8003f72:	6943      	ldr	r3, [r0, #20]
 8003f74:	b085      	sub	sp, #20
 8003f76:	2a01      	cmp	r2, #1
 8003f78:	4605      	mov	r5, r0
 8003f7a:	9303      	str	r3, [sp, #12]
 8003f7c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003f80:	460f      	mov	r7, r1
 8003f82:	d00f      	beq.n	8003fa4 <arm_rfft_q15+0x3c>
 8003f84:	4618      	mov	r0, r3
 8003f86:	796b      	ldrb	r3, [r5, #5]
 8003f88:	f000 f9d0 	bl	800432c <arm_cfft_q15>
 8003f8c:	692b      	ldr	r3, [r5, #16]
 8003f8e:	68ea      	ldr	r2, [r5, #12]
 8003f90:	68ad      	ldr	r5, [r5, #8]
 8003f92:	9501      	str	r5, [sp, #4]
 8003f94:	9600      	str	r6, [sp, #0]
 8003f96:	4621      	mov	r1, r4
 8003f98:	4638      	mov	r0, r7
 8003f9a:	f7ff ff8b 	bl	8003eb4 <arm_split_rfft_q15>
 8003f9e:	b005      	add	sp, #20
 8003fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa4:	f100 0308 	add.w	r3, r0, #8
 8003fa8:	e893 1108 	ldmia.w	r3, {r3, r8, ip}
 8003fac:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8003fb0:	b30c      	cbz	r4, 8003ff6 <arm_rfft_q15+0x8e>
 8003fb2:	f109 0904 	add.w	r9, r9, #4
 8003fb6:	4489      	add	r9, r1
 8003fb8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8003fbc:	46b3      	mov	fp, r6
 8003fbe:	f859 1d04 	ldr.w	r1, [r9, #-4]!
 8003fc2:	f8dc e000 	ldr.w	lr, [ip]
 8003fc6:	fb41 f00e 	smusd	r0, r1, lr
 8003fca:	f857 3b04 	ldr.w	r3, [r7], #4
 8003fce:	f8d8 2000 	ldr.w	r2, [r8]
 8003fd2:	fb23 0002 	smlad	r0, r3, r2, r0
 8003fd6:	fb21 f11e 	smuadx	r1, r1, lr
 8003fda:	4249      	negs	r1, r1
 8003fdc:	fb42 1213 	smlsdx	r2, r2, r3, r1
 8003fe0:	0c13      	lsrs	r3, r2, #16
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003fe8:	3c01      	subs	r4, #1
 8003fea:	f84b 3b04 	str.w	r3, [fp], #4
 8003fee:	44d4      	add	ip, sl
 8003ff0:	44d0      	add	r8, sl
 8003ff2:	d1e4      	bne.n	8003fbe <arm_rfft_q15+0x56>
 8003ff4:	792a      	ldrb	r2, [r5, #4]
 8003ff6:	796b      	ldrb	r3, [r5, #5]
 8003ff8:	9803      	ldr	r0, [sp, #12]
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	f000 f996 	bl	800432c <arm_cfft_q15>
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0cb      	beq.n	8003f9e <arm_rfft_q15+0x36>
 8004006:	3e02      	subs	r6, #2
 8004008:	2200      	movs	r2, #0
 800400a:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	8033      	strh	r3, [r6, #0]
 8004012:	682b      	ldr	r3, [r5, #0]
 8004014:	3201      	adds	r2, #1
 8004016:	4293      	cmp	r3, r2
 8004018:	d8f7      	bhi.n	800400a <arm_rfft_q15+0xa2>
 800401a:	b005      	add	sp, #20
 800401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004020 <arm_rfft_init_q15>:
 8004020:	b289      	uxth	r1, r1
 8004022:	b430      	push	{r4, r5}
 8004024:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004028:	4d31      	ldr	r5, [pc, #196]	; (80040f0 <arm_rfft_init_q15+0xd0>)
 800402a:	4c32      	ldr	r4, [pc, #200]	; (80040f4 <arm_rfft_init_q15+0xd4>)
 800402c:	7102      	strb	r2, [r0, #4]
 800402e:	7143      	strb	r3, [r0, #5]
 8004030:	6001      	str	r1, [r0, #0]
 8004032:	60c5      	str	r5, [r0, #12]
 8004034:	6104      	str	r4, [r0, #16]
 8004036:	d049      	beq.n	80040cc <arm_rfft_init_q15+0xac>
 8004038:	d910      	bls.n	800405c <arm_rfft_init_q15+0x3c>
 800403a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800403e:	d04c      	beq.n	80040da <arm_rfft_init_q15+0xba>
 8004040:	d933      	bls.n	80040aa <arm_rfft_init_q15+0x8a>
 8004042:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004046:	d01f      	beq.n	8004088 <arm_rfft_init_q15+0x68>
 8004048:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800404c:	d14c      	bne.n	80040e8 <arm_rfft_init_q15+0xc8>
 800404e:	2201      	movs	r2, #1
 8004050:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <arm_rfft_init_q15+0xd8>)
 8004052:	6082      	str	r2, [r0, #8]
 8004054:	6143      	str	r3, [r0, #20]
 8004056:	bc30      	pop	{r4, r5}
 8004058:	2000      	movs	r0, #0
 800405a:	4770      	bx	lr
 800405c:	2940      	cmp	r1, #64	; 0x40
 800405e:	d02e      	beq.n	80040be <arm_rfft_init_q15+0x9e>
 8004060:	d919      	bls.n	8004096 <arm_rfft_init_q15+0x76>
 8004062:	2980      	cmp	r1, #128	; 0x80
 8004064:	d009      	beq.n	800407a <arm_rfft_init_q15+0x5a>
 8004066:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800406a:	d13d      	bne.n	80040e8 <arm_rfft_init_q15+0xc8>
 800406c:	2220      	movs	r2, #32
 800406e:	4b23      	ldr	r3, [pc, #140]	; (80040fc <arm_rfft_init_q15+0xdc>)
 8004070:	6082      	str	r2, [r0, #8]
 8004072:	6143      	str	r3, [r0, #20]
 8004074:	bc30      	pop	{r4, r5}
 8004076:	2000      	movs	r0, #0
 8004078:	4770      	bx	lr
 800407a:	2240      	movs	r2, #64	; 0x40
 800407c:	4b20      	ldr	r3, [pc, #128]	; (8004100 <arm_rfft_init_q15+0xe0>)
 800407e:	6082      	str	r2, [r0, #8]
 8004080:	6143      	str	r3, [r0, #20]
 8004082:	bc30      	pop	{r4, r5}
 8004084:	2000      	movs	r0, #0
 8004086:	4770      	bx	lr
 8004088:	2202      	movs	r2, #2
 800408a:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <arm_rfft_init_q15+0xe4>)
 800408c:	6082      	str	r2, [r0, #8]
 800408e:	6143      	str	r3, [r0, #20]
 8004090:	bc30      	pop	{r4, r5}
 8004092:	2000      	movs	r0, #0
 8004094:	4770      	bx	lr
 8004096:	2920      	cmp	r1, #32
 8004098:	d126      	bne.n	80040e8 <arm_rfft_init_q15+0xc8>
 800409a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800409e:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <arm_rfft_init_q15+0xe8>)
 80040a0:	6082      	str	r2, [r0, #8]
 80040a2:	6143      	str	r3, [r0, #20]
 80040a4:	bc30      	pop	{r4, r5}
 80040a6:	2000      	movs	r0, #0
 80040a8:	4770      	bx	lr
 80040aa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80040ae:	d11b      	bne.n	80040e8 <arm_rfft_init_q15+0xc8>
 80040b0:	2208      	movs	r2, #8
 80040b2:	4b16      	ldr	r3, [pc, #88]	; (800410c <arm_rfft_init_q15+0xec>)
 80040b4:	6082      	str	r2, [r0, #8]
 80040b6:	6143      	str	r3, [r0, #20]
 80040b8:	bc30      	pop	{r4, r5}
 80040ba:	2000      	movs	r0, #0
 80040bc:	4770      	bx	lr
 80040be:	2280      	movs	r2, #128	; 0x80
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <arm_rfft_init_q15+0xf0>)
 80040c2:	6082      	str	r2, [r0, #8]
 80040c4:	6143      	str	r3, [r0, #20]
 80040c6:	bc30      	pop	{r4, r5}
 80040c8:	2000      	movs	r0, #0
 80040ca:	4770      	bx	lr
 80040cc:	2210      	movs	r2, #16
 80040ce:	4b11      	ldr	r3, [pc, #68]	; (8004114 <arm_rfft_init_q15+0xf4>)
 80040d0:	6082      	str	r2, [r0, #8]
 80040d2:	6143      	str	r3, [r0, #20]
 80040d4:	bc30      	pop	{r4, r5}
 80040d6:	2000      	movs	r0, #0
 80040d8:	4770      	bx	lr
 80040da:	2204      	movs	r2, #4
 80040dc:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <arm_rfft_init_q15+0xf8>)
 80040de:	6082      	str	r2, [r0, #8]
 80040e0:	6143      	str	r3, [r0, #20]
 80040e2:	bc30      	pop	{r4, r5}
 80040e4:	2000      	movs	r0, #0
 80040e6:	4770      	bx	lr
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	bc30      	pop	{r4, r5}
 80040ee:	4770      	bx	lr
 80040f0:	0800525c 	.word	0x0800525c
 80040f4:	0800925c 	.word	0x0800925c
 80040f8:	0800d2bc 	.word	0x0800d2bc
 80040fc:	0800d26c 	.word	0x0800d26c
 8004100:	0800d29c 	.word	0x0800d29c
 8004104:	0800d2ac 	.word	0x0800d2ac
 8004108:	0800d2cc 	.word	0x0800d2cc
 800410c:	0800d27c 	.word	0x0800d27c
 8004110:	0800d2dc 	.word	0x0800d2dc
 8004114:	0800d25c 	.word	0x0800d25c
 8004118:	0800d28c 	.word	0x0800d28c

0800411c <arm_cmplx_mag_squared_q15>:
 800411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004120:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 8004124:	d02c      	beq.n	8004180 <arm_cmplx_mag_squared_q15+0x64>
 8004126:	f100 0610 	add.w	r6, r0, #16
 800412a:	f101 0508 	add.w	r5, r1, #8
 800412e:	4677      	mov	r7, lr
 8004130:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8004134:	fb23 f803 	smuad	r8, r3, r3
 8004138:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800413c:	fb23 fc03 	smuad	ip, r3, r3
 8004140:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8004144:	fb23 f403 	smuad	r4, r3, r3
 8004148:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800414c:	fb23 f303 	smuad	r3, r3, r3
 8004150:	ea4f 4868 	mov.w	r8, r8, asr #17
 8004154:	ea4f 4c6c 	mov.w	ip, ip, asr #17
 8004158:	1464      	asrs	r4, r4, #17
 800415a:	145b      	asrs	r3, r3, #17
 800415c:	3f01      	subs	r7, #1
 800415e:	f825 8c08 	strh.w	r8, [r5, #-8]
 8004162:	f825 cc06 	strh.w	ip, [r5, #-6]
 8004166:	f825 4c04 	strh.w	r4, [r5, #-4]
 800416a:	f825 3c02 	strh.w	r3, [r5, #-2]
 800416e:	f106 0610 	add.w	r6, r6, #16
 8004172:	f105 0508 	add.w	r5, r5, #8
 8004176:	d1db      	bne.n	8004130 <arm_cmplx_mag_squared_q15+0x14>
 8004178:	eb00 100e 	add.w	r0, r0, lr, lsl #4
 800417c:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8004180:	f012 0203 	ands.w	r2, r2, #3
 8004184:	d008      	beq.n	8004198 <arm_cmplx_mag_squared_q15+0x7c>
 8004186:	f850 3b04 	ldr.w	r3, [r0], #4
 800418a:	fb23 f303 	smuad	r3, r3, r3
 800418e:	145b      	asrs	r3, r3, #17
 8004190:	3a01      	subs	r2, #1
 8004192:	f821 3b02 	strh.w	r3, [r1], #2
 8004196:	d1f6      	bne.n	8004186 <arm_cmplx_mag_squared_q15+0x6a>
 8004198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800419c <arm_cfft_radix4by2_q15>:
 800419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a0:	084d      	lsrs	r5, r1, #1
 80041a2:	b081      	sub	sp, #4
 80041a4:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80041a8:	4616      	mov	r6, r2
 80041aa:	d04d      	beq.n	8004248 <arm_cfft_radix4by2_q15+0xac>
 80041ac:	4604      	mov	r4, r0
 80041ae:	4686      	mov	lr, r0
 80041b0:	46bc      	mov	ip, r7
 80041b2:	4691      	mov	r9, r2
 80041b4:	4628      	mov	r0, r5
 80041b6:	f04f 0800 	mov.w	r8, #0
 80041ba:	f859 2b04 	ldr.w	r2, [r9], #4
 80041be:	f8de 3000 	ldr.w	r3, [lr]
 80041c2:	fa93 fa28 	shadd16	sl, r3, r8
 80041c6:	f8dc 1000 	ldr.w	r1, [ip]
 80041ca:	fa91 f128 	shadd16	r1, r1, r8
 80041ce:	fada fb11 	qsub16	fp, sl, r1
 80041d2:	fa9a f121 	shadd16	r1, sl, r1
 80041d6:	f84e 1b04 	str.w	r1, [lr], #4
 80041da:	fb22 f10b 	smuad	r1, r2, fp
 80041de:	fb42 f21b 	smusdx	r2, r2, fp
 80041e2:	0c13      	lsrs	r3, r2, #16
 80041e4:	041b      	lsls	r3, r3, #16
 80041e6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80041ea:	3801      	subs	r0, #1
 80041ec:	f84c 3b04 	str.w	r3, [ip], #4
 80041f0:	d1e3      	bne.n	80041ba <arm_cfft_radix4by2_q15+0x1e>
 80041f2:	4629      	mov	r1, r5
 80041f4:	2302      	movs	r3, #2
 80041f6:	4632      	mov	r2, r6
 80041f8:	4620      	mov	r0, r4
 80041fa:	f000 f8f5 	bl	80043e8 <arm_radix4_butterfly_q15>
 80041fe:	2302      	movs	r3, #2
 8004200:	4629      	mov	r1, r5
 8004202:	4632      	mov	r2, r6
 8004204:	4638      	mov	r0, r7
 8004206:	f000 f8ef 	bl	80043e8 <arm_radix4_butterfly_q15>
 800420a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800420e:	1ca3      	adds	r3, r4, #2
 8004210:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 8004214:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 8004218:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800421c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8004220:	007f      	lsls	r7, r7, #1
 8004222:	0076      	lsls	r6, r6, #1
 8004224:	0040      	lsls	r0, r0, #1
 8004226:	0052      	lsls	r2, r2, #1
 8004228:	f823 7c02 	strh.w	r7, [r3, #-2]
 800422c:	3408      	adds	r4, #8
 800422e:	f824 6c06 	strh.w	r6, [r4, #-6]
 8004232:	f824 0c04 	strh.w	r0, [r4, #-4]
 8004236:	f824 2c02 	strh.w	r2, [r4, #-2]
 800423a:	42a5      	cmp	r5, r4
 800423c:	f103 0308 	add.w	r3, r3, #8
 8004240:	d1e6      	bne.n	8004210 <arm_cfft_radix4by2_q15+0x74>
 8004242:	b001      	add	sp, #4
 8004244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004248:	4629      	mov	r1, r5
 800424a:	2302      	movs	r3, #2
 800424c:	f000 f8cc 	bl	80043e8 <arm_radix4_butterfly_q15>
 8004250:	4632      	mov	r2, r6
 8004252:	4629      	mov	r1, r5
 8004254:	4638      	mov	r0, r7
 8004256:	2302      	movs	r3, #2
 8004258:	b001      	add	sp, #4
 800425a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425e:	f000 b8c3 	b.w	80043e8 <arm_radix4_butterfly_q15>
 8004262:	bf00      	nop

08004264 <arm_cfft_radix4by2_inverse_q15>:
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004268:	084d      	lsrs	r5, r1, #1
 800426a:	b081      	sub	sp, #4
 800426c:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8004270:	4616      	mov	r6, r2
 8004272:	d04d      	beq.n	8004310 <arm_cfft_radix4by2_inverse_q15+0xac>
 8004274:	4604      	mov	r4, r0
 8004276:	4686      	mov	lr, r0
 8004278:	46bc      	mov	ip, r7
 800427a:	4691      	mov	r9, r2
 800427c:	4628      	mov	r0, r5
 800427e:	f04f 0800 	mov.w	r8, #0
 8004282:	f859 2b04 	ldr.w	r2, [r9], #4
 8004286:	f8de 3000 	ldr.w	r3, [lr]
 800428a:	fa93 fa28 	shadd16	sl, r3, r8
 800428e:	f8dc 1000 	ldr.w	r1, [ip]
 8004292:	fa91 f128 	shadd16	r1, r1, r8
 8004296:	fada fb11 	qsub16	fp, sl, r1
 800429a:	fa9a f121 	shadd16	r1, sl, r1
 800429e:	f84e 1b04 	str.w	r1, [lr], #4
 80042a2:	fb42 f10b 	smusd	r1, r2, fp
 80042a6:	fb22 f21b 	smuadx	r2, r2, fp
 80042aa:	0c13      	lsrs	r3, r2, #16
 80042ac:	041b      	lsls	r3, r3, #16
 80042ae:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80042b2:	3801      	subs	r0, #1
 80042b4:	f84c 3b04 	str.w	r3, [ip], #4
 80042b8:	d1e3      	bne.n	8004282 <arm_cfft_radix4by2_inverse_q15+0x1e>
 80042ba:	4629      	mov	r1, r5
 80042bc:	2302      	movs	r3, #2
 80042be:	4632      	mov	r2, r6
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 f9bf 	bl	8004644 <arm_radix4_butterfly_inverse_q15>
 80042c6:	2302      	movs	r3, #2
 80042c8:	4629      	mov	r1, r5
 80042ca:	4632      	mov	r2, r6
 80042cc:	4638      	mov	r0, r7
 80042ce:	f000 f9b9 	bl	8004644 <arm_radix4_butterfly_inverse_q15>
 80042d2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80042d6:	1ca3      	adds	r3, r4, #2
 80042d8:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 80042dc:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 80042e0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80042e4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80042e8:	007f      	lsls	r7, r7, #1
 80042ea:	0076      	lsls	r6, r6, #1
 80042ec:	0040      	lsls	r0, r0, #1
 80042ee:	0052      	lsls	r2, r2, #1
 80042f0:	f823 7c02 	strh.w	r7, [r3, #-2]
 80042f4:	3408      	adds	r4, #8
 80042f6:	f824 6c06 	strh.w	r6, [r4, #-6]
 80042fa:	f824 0c04 	strh.w	r0, [r4, #-4]
 80042fe:	f824 2c02 	strh.w	r2, [r4, #-2]
 8004302:	42a5      	cmp	r5, r4
 8004304:	f103 0308 	add.w	r3, r3, #8
 8004308:	d1e6      	bne.n	80042d8 <arm_cfft_radix4by2_inverse_q15+0x74>
 800430a:	b001      	add	sp, #4
 800430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004310:	4629      	mov	r1, r5
 8004312:	2302      	movs	r3, #2
 8004314:	f000 f996 	bl	8004644 <arm_radix4_butterfly_inverse_q15>
 8004318:	4632      	mov	r2, r6
 800431a:	4629      	mov	r1, r5
 800431c:	4638      	mov	r0, r7
 800431e:	2302      	movs	r3, #2
 8004320:	b001      	add	sp, #4
 8004322:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004326:	f000 b98d 	b.w	8004644 <arm_radix4_butterfly_inverse_q15>
 800432a:	bf00      	nop

0800432c <arm_cfft_q15>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	2a01      	cmp	r2, #1
 8004330:	460d      	mov	r5, r1
 8004332:	4604      	mov	r4, r0
 8004334:	461e      	mov	r6, r3
 8004336:	8801      	ldrh	r1, [r0, #0]
 8004338:	d024      	beq.n	8004384 <arm_cfft_q15+0x58>
 800433a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800433e:	d013      	beq.n	8004368 <arm_cfft_q15+0x3c>
 8004340:	d808      	bhi.n	8004354 <arm_cfft_q15+0x28>
 8004342:	2920      	cmp	r1, #32
 8004344:	d031      	beq.n	80043aa <arm_cfft_q15+0x7e>
 8004346:	d945      	bls.n	80043d4 <arm_cfft_q15+0xa8>
 8004348:	2940      	cmp	r1, #64	; 0x40
 800434a:	d00d      	beq.n	8004368 <arm_cfft_q15+0x3c>
 800434c:	2980      	cmp	r1, #128	; 0x80
 800434e:	d02c      	beq.n	80043aa <arm_cfft_q15+0x7e>
 8004350:	b98e      	cbnz	r6, 8004376 <arm_cfft_q15+0x4a>
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004358:	d006      	beq.n	8004368 <arm_cfft_q15+0x3c>
 800435a:	d923      	bls.n	80043a4 <arm_cfft_q15+0x78>
 800435c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004360:	d023      	beq.n	80043aa <arm_cfft_q15+0x7e>
 8004362:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004366:	d1f3      	bne.n	8004350 <arm_cfft_q15+0x24>
 8004368:	2301      	movs	r3, #1
 800436a:	6862      	ldr	r2, [r4, #4]
 800436c:	4628      	mov	r0, r5
 800436e:	f000 f83b 	bl	80043e8 <arm_radix4_butterfly_q15>
 8004372:	2e00      	cmp	r6, #0
 8004374:	d0ed      	beq.n	8004352 <arm_cfft_q15+0x26>
 8004376:	4628      	mov	r0, r5
 8004378:	68a2      	ldr	r2, [r4, #8]
 800437a:	89a1      	ldrh	r1, [r4, #12]
 800437c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004380:	f7fb bf69 	b.w	8000256 <arm_bitreversal_16>
 8004384:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004388:	d01e      	beq.n	80043c8 <arm_cfft_q15+0x9c>
 800438a:	d813      	bhi.n	80043b4 <arm_cfft_q15+0x88>
 800438c:	2920      	cmp	r1, #32
 800438e:	d004      	beq.n	800439a <arm_cfft_q15+0x6e>
 8004390:	d927      	bls.n	80043e2 <arm_cfft_q15+0xb6>
 8004392:	2940      	cmp	r1, #64	; 0x40
 8004394:	d018      	beq.n	80043c8 <arm_cfft_q15+0x9c>
 8004396:	2980      	cmp	r1, #128	; 0x80
 8004398:	d1da      	bne.n	8004350 <arm_cfft_q15+0x24>
 800439a:	6862      	ldr	r2, [r4, #4]
 800439c:	4628      	mov	r0, r5
 800439e:	f7ff ff61 	bl	8004264 <arm_cfft_radix4by2_inverse_q15>
 80043a2:	e7d5      	b.n	8004350 <arm_cfft_q15+0x24>
 80043a4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80043a8:	d1d2      	bne.n	8004350 <arm_cfft_q15+0x24>
 80043aa:	6862      	ldr	r2, [r4, #4]
 80043ac:	4628      	mov	r0, r5
 80043ae:	f7ff fef5 	bl	800419c <arm_cfft_radix4by2_q15>
 80043b2:	e7cd      	b.n	8004350 <arm_cfft_q15+0x24>
 80043b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80043b8:	d006      	beq.n	80043c8 <arm_cfft_q15+0x9c>
 80043ba:	d90e      	bls.n	80043da <arm_cfft_q15+0xae>
 80043bc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80043c0:	d0eb      	beq.n	800439a <arm_cfft_q15+0x6e>
 80043c2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80043c6:	d1c3      	bne.n	8004350 <arm_cfft_q15+0x24>
 80043c8:	2301      	movs	r3, #1
 80043ca:	6862      	ldr	r2, [r4, #4]
 80043cc:	4628      	mov	r0, r5
 80043ce:	f000 f939 	bl	8004644 <arm_radix4_butterfly_inverse_q15>
 80043d2:	e7bd      	b.n	8004350 <arm_cfft_q15+0x24>
 80043d4:	2910      	cmp	r1, #16
 80043d6:	d1bb      	bne.n	8004350 <arm_cfft_q15+0x24>
 80043d8:	e7c6      	b.n	8004368 <arm_cfft_q15+0x3c>
 80043da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80043de:	d0dc      	beq.n	800439a <arm_cfft_q15+0x6e>
 80043e0:	e7b6      	b.n	8004350 <arm_cfft_q15+0x24>
 80043e2:	2910      	cmp	r1, #16
 80043e4:	d1b4      	bne.n	8004350 <arm_cfft_q15+0x24>
 80043e6:	e7ef      	b.n	80043c8 <arm_cfft_q15+0x9c>

080043e8 <arm_radix4_butterfly_q15>:
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	b08f      	sub	sp, #60	; 0x3c
 80043ee:	469b      	mov	fp, r3
 80043f0:	9101      	str	r1, [sp, #4]
 80043f2:	0889      	lsrs	r1, r1, #2
 80043f4:	460e      	mov	r6, r1
 80043f6:	910d      	str	r1, [sp, #52]	; 0x34
 80043f8:	0089      	lsls	r1, r1, #2
 80043fa:	4607      	mov	r7, r0
 80043fc:	900c      	str	r0, [sp, #48]	; 0x30
 80043fe:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8004402:	4408      	add	r0, r1
 8004404:	2400      	movs	r4, #0
 8004406:	1845      	adds	r5, r0, r1
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4696      	mov	lr, r2
 800440c:	9209      	str	r2, [sp, #36]	; 0x24
 800440e:	46b2      	mov	sl, r6
 8004410:	4429      	add	r1, r5
 8004412:	9302      	str	r3, [sp, #8]
 8004414:	4626      	mov	r6, r4
 8004416:	4622      	mov	r2, r4
 8004418:	f8cd b000 	str.w	fp, [sp]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	fa93 fc22 	shadd16	ip, r3, r2
 8004422:	fa9c fc22 	shadd16	ip, ip, r2
 8004426:	682b      	ldr	r3, [r5, #0]
 8004428:	fa93 f322 	shadd16	r3, r3, r2
 800442c:	fa93 f322 	shadd16	r3, r3, r2
 8004430:	fa9c f813 	qadd16	r8, ip, r3
 8004434:	fadc fc13 	qsub16	ip, ip, r3
 8004438:	6803      	ldr	r3, [r0, #0]
 800443a:	fa93 f322 	shadd16	r3, r3, r2
 800443e:	fa93 f922 	shadd16	r9, r3, r2
 8004442:	680b      	ldr	r3, [r1, #0]
 8004444:	fa93 f322 	shadd16	r3, r3, r2
 8004448:	fa93 f322 	shadd16	r3, r3, r2
 800444c:	fa99 f313 	qadd16	r3, r9, r3
 8004450:	fa98 f923 	shadd16	r9, r8, r3
 8004454:	f847 9b04 	str.w	r9, [r7], #4
 8004458:	fad8 f313 	qsub16	r3, r8, r3
 800445c:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 8004460:	fb29 fb03 	smuad	fp, r9, r3
 8004464:	fb49 f913 	smusdx	r9, r9, r3
 8004468:	6803      	ldr	r3, [r0, #0]
 800446a:	fa93 f322 	shadd16	r3, r3, r2
 800446e:	fa93 f822 	shadd16	r8, r3, r2
 8004472:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8004476:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800447a:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 800447e:	f840 3b04 	str.w	r3, [r0], #4
 8004482:	680b      	ldr	r3, [r1, #0]
 8004484:	fa93 f322 	shadd16	r3, r3, r2
 8004488:	fa93 f322 	shadd16	r3, r3, r2
 800448c:	fad8 f313 	qsub16	r3, r8, r3
 8004490:	faac f913 	qasx	r9, ip, r3
 8004494:	faec fc13 	qsax	ip, ip, r3
 8004498:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 800449c:	fb23 f80c 	smuad	r8, r3, ip
 80044a0:	fb43 f31c 	smusdx	r3, r3, ip
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80044ac:	f845 3b04 	str.w	r3, [r5], #4
 80044b0:	f85e 3004 	ldr.w	r3, [lr, r4]
 80044b4:	fb23 fc09 	smuad	ip, r3, r9
 80044b8:	fb43 f319 	smusdx	r3, r3, r9
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80044c4:	f841 3b04 	str.w	r3, [r1], #4
 80044c8:	9b00      	ldr	r3, [sp, #0]
 80044ca:	441e      	add	r6, r3
 80044cc:	9b02      	ldr	r3, [sp, #8]
 80044ce:	f1ba 0a01 	subs.w	sl, sl, #1
 80044d2:	441c      	add	r4, r3
 80044d4:	d1a2      	bne.n	800441c <arm_radix4_butterfly_q15+0x34>
 80044d6:	f8dd b000 	ldr.w	fp, [sp]
 80044da:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80044de:	9306      	str	r3, [sp, #24]
 80044e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	f240 8081 	bls.w	80045ea <arm_radix4_butterfly_q15+0x202>
 80044e8:	f8cd a008 	str.w	sl, [sp, #8]
 80044ec:	930a      	str	r3, [sp, #40]	; 0x28
 80044ee:	469a      	mov	sl, r3
 80044f0:	ea4f 039a 	mov.w	r3, sl, lsr #2
 80044f4:	2200      	movs	r2, #0
 80044f6:	4611      	mov	r1, r2
 80044f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80044fa:	9204      	str	r2, [sp, #16]
 80044fc:	1e5a      	subs	r2, r3, #1
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	9308      	str	r3, [sp, #32]
 8004502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004504:	9207      	str	r2, [sp, #28]
 8004506:	9105      	str	r1, [sp, #20]
 8004508:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800450c:	9303      	str	r3, [sp, #12]
 800450e:	9908      	ldr	r1, [sp, #32]
 8004510:	9a03      	ldr	r2, [sp, #12]
 8004512:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004514:	1850      	adds	r0, r2, r1
 8004516:	9a05      	ldr	r2, [sp, #20]
 8004518:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800451c:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8004520:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8004524:	9b06      	ldr	r3, [sp, #24]
 8004526:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 800452a:	18d3      	adds	r3, r2, r3
 800452c:	9305      	str	r3, [sp, #20]
 800452e:	9a04      	ldr	r2, [sp, #16]
 8004530:	9b01      	ldr	r3, [sp, #4]
 8004532:	180d      	adds	r5, r1, r0
 8004534:	4293      	cmp	r3, r2
 8004536:	46b6      	mov	lr, r6
 8004538:	eb01 0405 	add.w	r4, r1, r5
 800453c:	9e03      	ldr	r6, [sp, #12]
 800453e:	d941      	bls.n	80045c4 <arm_radix4_butterfly_q15+0x1dc>
 8004540:	eb0a 0e02 	add.w	lr, sl, r2
 8004544:	6833      	ldr	r3, [r6, #0]
 8004546:	682a      	ldr	r2, [r5, #0]
 8004548:	fa93 fb12 	qadd16	fp, r3, r2
 800454c:	fad3 f312 	qsub16	r3, r3, r2
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	6802      	ldr	r2, [r0, #0]
 8004554:	6821      	ldr	r1, [r4, #0]
 8004556:	fa92 f211 	qadd16	r2, r2, r1
 800455a:	fa9b f322 	shadd16	r3, fp, r2
 800455e:	9902      	ldr	r1, [sp, #8]
 8004560:	fa93 f121 	shadd16	r1, r3, r1
 8004564:	6031      	str	r1, [r6, #0]
 8004566:	443e      	add	r6, r7
 8004568:	fadb f222 	shsub16	r2, fp, r2
 800456c:	fb28 f102 	smuad	r1, r8, r2
 8004570:	fb48 f212 	smusdx	r2, r8, r2
 8004574:	0c12      	lsrs	r2, r2, #16
 8004576:	0412      	lsls	r2, r2, #16
 8004578:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800457c:	6801      	ldr	r1, [r0, #0]
 800457e:	6002      	str	r2, [r0, #0]
 8004580:	6822      	ldr	r2, [r4, #0]
 8004582:	4438      	add	r0, r7
 8004584:	fad1 f212 	qsub16	r2, r1, r2
 8004588:	9b00      	ldr	r3, [sp, #0]
 800458a:	faa3 f122 	shasx	r1, r3, r2
 800458e:	fae3 f322 	shsax	r3, r3, r2
 8004592:	fb2c fb03 	smuad	fp, ip, r3
 8004596:	fb4c f313 	smusdx	r3, ip, r3
 800459a:	0c1b      	lsrs	r3, r3, #16
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80045a2:	602b      	str	r3, [r5, #0]
 80045a4:	443d      	add	r5, r7
 80045a6:	fb29 f301 	smuad	r3, r9, r1
 80045aa:	fb49 f111 	smusdx	r1, r9, r1
 80045ae:	0c09      	lsrs	r1, r1, #16
 80045b0:	0409      	lsls	r1, r1, #16
 80045b2:	9a01      	ldr	r2, [sp, #4]
 80045b4:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 80045b8:	4673      	mov	r3, lr
 80045ba:	429a      	cmp	r2, r3
 80045bc:	6021      	str	r1, [r4, #0]
 80045be:	44d6      	add	lr, sl
 80045c0:	443c      	add	r4, r7
 80045c2:	d8bf      	bhi.n	8004544 <arm_radix4_butterfly_q15+0x15c>
 80045c4:	9a03      	ldr	r2, [sp, #12]
 80045c6:	9b04      	ldr	r3, [sp, #16]
 80045c8:	3204      	adds	r2, #4
 80045ca:	9203      	str	r2, [sp, #12]
 80045cc:	9a07      	ldr	r2, [sp, #28]
 80045ce:	3301      	adds	r3, #1
 80045d0:	4293      	cmp	r3, r2
 80045d2:	9304      	str	r3, [sp, #16]
 80045d4:	d99b      	bls.n	800450e <arm_radix4_butterfly_q15+0x126>
 80045d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045d8:	9a06      	ldr	r2, [sp, #24]
 80045da:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	0092      	lsls	r2, r2, #2
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	930a      	str	r3, [sp, #40]	; 0x28
 80045e6:	9206      	str	r2, [sp, #24]
 80045e8:	d882      	bhi.n	80044f0 <arm_radix4_butterfly_q15+0x108>
 80045ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80045ec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80045ee:	3410      	adds	r4, #16
 80045f0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80045f4:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80045f8:	fa93 f117 	qadd16	r1, r3, r7
 80045fc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8004600:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004604:	fa92 f510 	qadd16	r5, r2, r0
 8004608:	fa91 f525 	shadd16	r5, r1, r5
 800460c:	f844 5c10 	str.w	r5, [r4, #-16]
 8004610:	fa92 f510 	qadd16	r5, r2, r0
 8004614:	fad1 f125 	shsub16	r1, r1, r5
 8004618:	f844 1c0c 	str.w	r1, [r4, #-12]
 800461c:	fad3 f317 	qsub16	r3, r3, r7
 8004620:	fad2 f210 	qsub16	r2, r2, r0
 8004624:	fae3 f122 	shsax	r1, r3, r2
 8004628:	f844 1c08 	str.w	r1, [r4, #-8]
 800462c:	faa3 f322 	shasx	r3, r3, r2
 8004630:	3e01      	subs	r6, #1
 8004632:	f844 3c04 	str.w	r3, [r4, #-4]
 8004636:	f104 0410 	add.w	r4, r4, #16
 800463a:	d1d9      	bne.n	80045f0 <arm_radix4_butterfly_q15+0x208>
 800463c:	b00f      	add	sp, #60	; 0x3c
 800463e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004642:	bf00      	nop

08004644 <arm_radix4_butterfly_inverse_q15>:
 8004644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004648:	b08f      	sub	sp, #60	; 0x3c
 800464a:	469b      	mov	fp, r3
 800464c:	9101      	str	r1, [sp, #4]
 800464e:	0889      	lsrs	r1, r1, #2
 8004650:	460e      	mov	r6, r1
 8004652:	910d      	str	r1, [sp, #52]	; 0x34
 8004654:	0089      	lsls	r1, r1, #2
 8004656:	4607      	mov	r7, r0
 8004658:	900c      	str	r0, [sp, #48]	; 0x30
 800465a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800465e:	4408      	add	r0, r1
 8004660:	2400      	movs	r4, #0
 8004662:	1845      	adds	r5, r0, r1
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4696      	mov	lr, r2
 8004668:	9209      	str	r2, [sp, #36]	; 0x24
 800466a:	46b2      	mov	sl, r6
 800466c:	4429      	add	r1, r5
 800466e:	9302      	str	r3, [sp, #8]
 8004670:	4626      	mov	r6, r4
 8004672:	4622      	mov	r2, r4
 8004674:	f8cd b000 	str.w	fp, [sp]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	fa93 fc22 	shadd16	ip, r3, r2
 800467e:	fa9c fc22 	shadd16	ip, ip, r2
 8004682:	682b      	ldr	r3, [r5, #0]
 8004684:	fa93 f322 	shadd16	r3, r3, r2
 8004688:	fa93 f322 	shadd16	r3, r3, r2
 800468c:	fa9c f813 	qadd16	r8, ip, r3
 8004690:	fadc fc13 	qsub16	ip, ip, r3
 8004694:	6803      	ldr	r3, [r0, #0]
 8004696:	fa93 f322 	shadd16	r3, r3, r2
 800469a:	fa93 f922 	shadd16	r9, r3, r2
 800469e:	680b      	ldr	r3, [r1, #0]
 80046a0:	fa93 f322 	shadd16	r3, r3, r2
 80046a4:	fa93 f322 	shadd16	r3, r3, r2
 80046a8:	fa99 f313 	qadd16	r3, r9, r3
 80046ac:	fa98 f923 	shadd16	r9, r8, r3
 80046b0:	f847 9b04 	str.w	r9, [r7], #4
 80046b4:	fad8 f313 	qsub16	r3, r8, r3
 80046b8:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 80046bc:	fb49 fb03 	smusd	fp, r9, r3
 80046c0:	fb29 f913 	smuadx	r9, r9, r3
 80046c4:	6803      	ldr	r3, [r0, #0]
 80046c6:	fa93 f322 	shadd16	r3, r3, r2
 80046ca:	fa93 f822 	shadd16	r8, r3, r2
 80046ce:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80046d2:	ea4f 4909 	mov.w	r9, r9, lsl #16
 80046d6:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 80046da:	f840 3b04 	str.w	r3, [r0], #4
 80046de:	680b      	ldr	r3, [r1, #0]
 80046e0:	fa93 f322 	shadd16	r3, r3, r2
 80046e4:	fa93 f322 	shadd16	r3, r3, r2
 80046e8:	fad8 f313 	qsub16	r3, r8, r3
 80046ec:	faec f913 	qsax	r9, ip, r3
 80046f0:	faac fc13 	qasx	ip, ip, r3
 80046f4:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80046f8:	fb43 f80c 	smusd	r8, r3, ip
 80046fc:	fb23 f31c 	smuadx	r3, r3, ip
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004708:	f845 3b04 	str.w	r3, [r5], #4
 800470c:	f85e 3004 	ldr.w	r3, [lr, r4]
 8004710:	fb43 fc09 	smusd	ip, r3, r9
 8004714:	fb23 f319 	smuadx	r3, r3, r9
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8004720:	f841 3b04 	str.w	r3, [r1], #4
 8004724:	9b00      	ldr	r3, [sp, #0]
 8004726:	441e      	add	r6, r3
 8004728:	9b02      	ldr	r3, [sp, #8]
 800472a:	f1ba 0a01 	subs.w	sl, sl, #1
 800472e:	441c      	add	r4, r3
 8004730:	d1a2      	bne.n	8004678 <arm_radix4_butterfly_inverse_q15+0x34>
 8004732:	f8dd b000 	ldr.w	fp, [sp]
 8004736:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800473a:	9306      	str	r3, [sp, #24]
 800473c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800473e:	2b04      	cmp	r3, #4
 8004740:	f240 8081 	bls.w	8004846 <arm_radix4_butterfly_inverse_q15+0x202>
 8004744:	f8cd a008 	str.w	sl, [sp, #8]
 8004748:	930a      	str	r3, [sp, #40]	; 0x28
 800474a:	469a      	mov	sl, r3
 800474c:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8004750:	2200      	movs	r2, #0
 8004752:	4611      	mov	r1, r2
 8004754:	930b      	str	r3, [sp, #44]	; 0x2c
 8004756:	9204      	str	r2, [sp, #16]
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	9308      	str	r3, [sp, #32]
 800475e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004760:	9207      	str	r2, [sp, #28]
 8004762:	9105      	str	r1, [sp, #20]
 8004764:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8004768:	9303      	str	r3, [sp, #12]
 800476a:	9908      	ldr	r1, [sp, #32]
 800476c:	9a03      	ldr	r2, [sp, #12]
 800476e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004770:	1850      	adds	r0, r2, r1
 8004772:	9a05      	ldr	r2, [sp, #20]
 8004774:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004778:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 800477c:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8004780:	9b06      	ldr	r3, [sp, #24]
 8004782:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 8004786:	18d3      	adds	r3, r2, r3
 8004788:	9305      	str	r3, [sp, #20]
 800478a:	9a04      	ldr	r2, [sp, #16]
 800478c:	9b01      	ldr	r3, [sp, #4]
 800478e:	180d      	adds	r5, r1, r0
 8004790:	4293      	cmp	r3, r2
 8004792:	46b6      	mov	lr, r6
 8004794:	eb01 0405 	add.w	r4, r1, r5
 8004798:	9e03      	ldr	r6, [sp, #12]
 800479a:	d941      	bls.n	8004820 <arm_radix4_butterfly_inverse_q15+0x1dc>
 800479c:	eb0a 0e02 	add.w	lr, sl, r2
 80047a0:	6833      	ldr	r3, [r6, #0]
 80047a2:	682a      	ldr	r2, [r5, #0]
 80047a4:	fa93 fb12 	qadd16	fp, r3, r2
 80047a8:	fad3 f312 	qsub16	r3, r3, r2
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6802      	ldr	r2, [r0, #0]
 80047b0:	6821      	ldr	r1, [r4, #0]
 80047b2:	fa92 f211 	qadd16	r2, r2, r1
 80047b6:	fa9b f322 	shadd16	r3, fp, r2
 80047ba:	9902      	ldr	r1, [sp, #8]
 80047bc:	fa93 f121 	shadd16	r1, r3, r1
 80047c0:	6031      	str	r1, [r6, #0]
 80047c2:	443e      	add	r6, r7
 80047c4:	fadb f222 	shsub16	r2, fp, r2
 80047c8:	fb48 f102 	smusd	r1, r8, r2
 80047cc:	fb28 f212 	smuadx	r2, r8, r2
 80047d0:	0c12      	lsrs	r2, r2, #16
 80047d2:	0412      	lsls	r2, r2, #16
 80047d4:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 80047d8:	6801      	ldr	r1, [r0, #0]
 80047da:	6002      	str	r2, [r0, #0]
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	4438      	add	r0, r7
 80047e0:	fad1 f212 	qsub16	r2, r1, r2
 80047e4:	9b00      	ldr	r3, [sp, #0]
 80047e6:	fae3 f122 	shsax	r1, r3, r2
 80047ea:	faa3 f322 	shasx	r3, r3, r2
 80047ee:	fb4c fb03 	smusd	fp, ip, r3
 80047f2:	fb2c f313 	smuadx	r3, ip, r3
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	041b      	lsls	r3, r3, #16
 80047fa:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80047fe:	602b      	str	r3, [r5, #0]
 8004800:	443d      	add	r5, r7
 8004802:	fb49 f301 	smusd	r3, r9, r1
 8004806:	fb29 f111 	smuadx	r1, r9, r1
 800480a:	0c09      	lsrs	r1, r1, #16
 800480c:	0409      	lsls	r1, r1, #16
 800480e:	9a01      	ldr	r2, [sp, #4]
 8004810:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8004814:	4673      	mov	r3, lr
 8004816:	429a      	cmp	r2, r3
 8004818:	6021      	str	r1, [r4, #0]
 800481a:	44d6      	add	lr, sl
 800481c:	443c      	add	r4, r7
 800481e:	d8bf      	bhi.n	80047a0 <arm_radix4_butterfly_inverse_q15+0x15c>
 8004820:	9a03      	ldr	r2, [sp, #12]
 8004822:	9b04      	ldr	r3, [sp, #16]
 8004824:	3204      	adds	r2, #4
 8004826:	9203      	str	r2, [sp, #12]
 8004828:	9a07      	ldr	r2, [sp, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	4293      	cmp	r3, r2
 800482e:	9304      	str	r3, [sp, #16]
 8004830:	d99b      	bls.n	800476a <arm_radix4_butterfly_inverse_q15+0x126>
 8004832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004834:	9a06      	ldr	r2, [sp, #24]
 8004836:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	0092      	lsls	r2, r2, #2
 800483e:	2b04      	cmp	r3, #4
 8004840:	930a      	str	r3, [sp, #40]	; 0x28
 8004842:	9206      	str	r2, [sp, #24]
 8004844:	d882      	bhi.n	800474c <arm_radix4_butterfly_inverse_q15+0x108>
 8004846:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004848:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800484a:	3410      	adds	r4, #16
 800484c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8004850:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8004854:	fa93 f117 	qadd16	r1, r3, r7
 8004858:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800485c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004860:	fa92 f510 	qadd16	r5, r2, r0
 8004864:	fa91 f525 	shadd16	r5, r1, r5
 8004868:	f844 5c10 	str.w	r5, [r4, #-16]
 800486c:	fa92 f510 	qadd16	r5, r2, r0
 8004870:	fad1 f125 	shsub16	r1, r1, r5
 8004874:	f844 1c0c 	str.w	r1, [r4, #-12]
 8004878:	fad3 f317 	qsub16	r3, r3, r7
 800487c:	fad2 f210 	qsub16	r2, r2, r0
 8004880:	faa3 f122 	shasx	r1, r3, r2
 8004884:	f844 1c08 	str.w	r1, [r4, #-8]
 8004888:	fae3 f322 	shsax	r3, r3, r2
 800488c:	3e01      	subs	r6, #1
 800488e:	f844 3c04 	str.w	r3, [r4, #-4]
 8004892:	f104 0410 	add.w	r4, r4, #16
 8004896:	d1d9      	bne.n	800484c <arm_radix4_butterfly_inverse_q15+0x208>
 8004898:	b00f      	add	sp, #60	; 0x3c
 800489a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489e:	bf00      	nop

080048a0 <std>:
 80048a0:	2300      	movs	r3, #0
 80048a2:	b510      	push	{r4, lr}
 80048a4:	4604      	mov	r4, r0
 80048a6:	e9c0 3300 	strd	r3, r3, [r0]
 80048aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ae:	6083      	str	r3, [r0, #8]
 80048b0:	8181      	strh	r1, [r0, #12]
 80048b2:	6643      	str	r3, [r0, #100]	; 0x64
 80048b4:	81c2      	strh	r2, [r0, #14]
 80048b6:	6183      	str	r3, [r0, #24]
 80048b8:	4619      	mov	r1, r3
 80048ba:	2208      	movs	r2, #8
 80048bc:	305c      	adds	r0, #92	; 0x5c
 80048be:	f000 f9d3 	bl	8004c68 <memset>
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <std+0x38>)
 80048c4:	6263      	str	r3, [r4, #36]	; 0x24
 80048c6:	4b05      	ldr	r3, [pc, #20]	; (80048dc <std+0x3c>)
 80048c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <std+0x40>)
 80048cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <std+0x44>)
 80048d0:	6224      	str	r4, [r4, #32]
 80048d2:	6323      	str	r3, [r4, #48]	; 0x30
 80048d4:	bd10      	pop	{r4, pc}
 80048d6:	bf00      	nop
 80048d8:	08004ab9 	.word	0x08004ab9
 80048dc:	08004adb 	.word	0x08004adb
 80048e0:	08004b13 	.word	0x08004b13
 80048e4:	08004b37 	.word	0x08004b37

080048e8 <stdio_exit_handler>:
 80048e8:	4a02      	ldr	r2, [pc, #8]	; (80048f4 <stdio_exit_handler+0xc>)
 80048ea:	4903      	ldr	r1, [pc, #12]	; (80048f8 <stdio_exit_handler+0x10>)
 80048ec:	4803      	ldr	r0, [pc, #12]	; (80048fc <stdio_exit_handler+0x14>)
 80048ee:	f000 b869 	b.w	80049c4 <_fwalk_sglue>
 80048f2:	bf00      	nop
 80048f4:	20000070 	.word	0x20000070
 80048f8:	08005059 	.word	0x08005059
 80048fc:	2000007c 	.word	0x2000007c

08004900 <cleanup_stdio>:
 8004900:	6841      	ldr	r1, [r0, #4]
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <cleanup_stdio+0x34>)
 8004904:	4299      	cmp	r1, r3
 8004906:	b510      	push	{r4, lr}
 8004908:	4604      	mov	r4, r0
 800490a:	d001      	beq.n	8004910 <cleanup_stdio+0x10>
 800490c:	f000 fba4 	bl	8005058 <_fflush_r>
 8004910:	68a1      	ldr	r1, [r4, #8]
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <cleanup_stdio+0x38>)
 8004914:	4299      	cmp	r1, r3
 8004916:	d002      	beq.n	800491e <cleanup_stdio+0x1e>
 8004918:	4620      	mov	r0, r4
 800491a:	f000 fb9d 	bl	8005058 <_fflush_r>
 800491e:	68e1      	ldr	r1, [r4, #12]
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <cleanup_stdio+0x3c>)
 8004922:	4299      	cmp	r1, r3
 8004924:	d004      	beq.n	8004930 <cleanup_stdio+0x30>
 8004926:	4620      	mov	r0, r4
 8004928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800492c:	f000 bb94 	b.w	8005058 <_fflush_r>
 8004930:	bd10      	pop	{r4, pc}
 8004932:	bf00      	nop
 8004934:	20000688 	.word	0x20000688
 8004938:	200006f0 	.word	0x200006f0
 800493c:	20000758 	.word	0x20000758

08004940 <global_stdio_init.part.0>:
 8004940:	b510      	push	{r4, lr}
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <global_stdio_init.part.0+0x30>)
 8004944:	4c0b      	ldr	r4, [pc, #44]	; (8004974 <global_stdio_init.part.0+0x34>)
 8004946:	4a0c      	ldr	r2, [pc, #48]	; (8004978 <global_stdio_init.part.0+0x38>)
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	4620      	mov	r0, r4
 800494c:	2200      	movs	r2, #0
 800494e:	2104      	movs	r1, #4
 8004950:	f7ff ffa6 	bl	80048a0 <std>
 8004954:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004958:	2201      	movs	r2, #1
 800495a:	2109      	movs	r1, #9
 800495c:	f7ff ffa0 	bl	80048a0 <std>
 8004960:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004964:	2202      	movs	r2, #2
 8004966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800496a:	2112      	movs	r1, #18
 800496c:	f7ff bf98 	b.w	80048a0 <std>
 8004970:	200007c0 	.word	0x200007c0
 8004974:	20000688 	.word	0x20000688
 8004978:	080048e9 	.word	0x080048e9

0800497c <__sfp_lock_acquire>:
 800497c:	4801      	ldr	r0, [pc, #4]	; (8004984 <__sfp_lock_acquire+0x8>)
 800497e:	f000 b9eb 	b.w	8004d58 <__retarget_lock_acquire_recursive>
 8004982:	bf00      	nop
 8004984:	200007c9 	.word	0x200007c9

08004988 <__sfp_lock_release>:
 8004988:	4801      	ldr	r0, [pc, #4]	; (8004990 <__sfp_lock_release+0x8>)
 800498a:	f000 b9e6 	b.w	8004d5a <__retarget_lock_release_recursive>
 800498e:	bf00      	nop
 8004990:	200007c9 	.word	0x200007c9

08004994 <__sinit>:
 8004994:	b510      	push	{r4, lr}
 8004996:	4604      	mov	r4, r0
 8004998:	f7ff fff0 	bl	800497c <__sfp_lock_acquire>
 800499c:	6a23      	ldr	r3, [r4, #32]
 800499e:	b11b      	cbz	r3, 80049a8 <__sinit+0x14>
 80049a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a4:	f7ff bff0 	b.w	8004988 <__sfp_lock_release>
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <__sinit+0x28>)
 80049aa:	6223      	str	r3, [r4, #32]
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <__sinit+0x2c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f5      	bne.n	80049a0 <__sinit+0xc>
 80049b4:	f7ff ffc4 	bl	8004940 <global_stdio_init.part.0>
 80049b8:	e7f2      	b.n	80049a0 <__sinit+0xc>
 80049ba:	bf00      	nop
 80049bc:	08004901 	.word	0x08004901
 80049c0:	200007c0 	.word	0x200007c0

080049c4 <_fwalk_sglue>:
 80049c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c8:	4607      	mov	r7, r0
 80049ca:	4688      	mov	r8, r1
 80049cc:	4614      	mov	r4, r2
 80049ce:	2600      	movs	r6, #0
 80049d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049d4:	f1b9 0901 	subs.w	r9, r9, #1
 80049d8:	d505      	bpl.n	80049e6 <_fwalk_sglue+0x22>
 80049da:	6824      	ldr	r4, [r4, #0]
 80049dc:	2c00      	cmp	r4, #0
 80049de:	d1f7      	bne.n	80049d0 <_fwalk_sglue+0xc>
 80049e0:	4630      	mov	r0, r6
 80049e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049e6:	89ab      	ldrh	r3, [r5, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d907      	bls.n	80049fc <_fwalk_sglue+0x38>
 80049ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049f0:	3301      	adds	r3, #1
 80049f2:	d003      	beq.n	80049fc <_fwalk_sglue+0x38>
 80049f4:	4629      	mov	r1, r5
 80049f6:	4638      	mov	r0, r7
 80049f8:	47c0      	blx	r8
 80049fa:	4306      	orrs	r6, r0
 80049fc:	3568      	adds	r5, #104	; 0x68
 80049fe:	e7e9      	b.n	80049d4 <_fwalk_sglue+0x10>

08004a00 <_puts_r>:
 8004a00:	6a03      	ldr	r3, [r0, #32]
 8004a02:	b570      	push	{r4, r5, r6, lr}
 8004a04:	6884      	ldr	r4, [r0, #8]
 8004a06:	4605      	mov	r5, r0
 8004a08:	460e      	mov	r6, r1
 8004a0a:	b90b      	cbnz	r3, 8004a10 <_puts_r+0x10>
 8004a0c:	f7ff ffc2 	bl	8004994 <__sinit>
 8004a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a12:	07db      	lsls	r3, r3, #31
 8004a14:	d405      	bmi.n	8004a22 <_puts_r+0x22>
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	0598      	lsls	r0, r3, #22
 8004a1a:	d402      	bmi.n	8004a22 <_puts_r+0x22>
 8004a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a1e:	f000 f99b 	bl	8004d58 <__retarget_lock_acquire_recursive>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	0719      	lsls	r1, r3, #28
 8004a26:	d513      	bpl.n	8004a50 <_puts_r+0x50>
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	b18b      	cbz	r3, 8004a50 <_puts_r+0x50>
 8004a2c:	3e01      	subs	r6, #1
 8004a2e:	68a3      	ldr	r3, [r4, #8]
 8004a30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a34:	3b01      	subs	r3, #1
 8004a36:	60a3      	str	r3, [r4, #8]
 8004a38:	b9e9      	cbnz	r1, 8004a76 <_puts_r+0x76>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	da2e      	bge.n	8004a9c <_puts_r+0x9c>
 8004a3e:	4622      	mov	r2, r4
 8004a40:	210a      	movs	r1, #10
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f87b 	bl	8004b3e <__swbuf_r>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d007      	beq.n	8004a5c <_puts_r+0x5c>
 8004a4c:	250a      	movs	r5, #10
 8004a4e:	e007      	b.n	8004a60 <_puts_r+0x60>
 8004a50:	4621      	mov	r1, r4
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f8b0 	bl	8004bb8 <__swsetup_r>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d0e7      	beq.n	8004a2c <_puts_r+0x2c>
 8004a5c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a62:	07da      	lsls	r2, r3, #31
 8004a64:	d405      	bmi.n	8004a72 <_puts_r+0x72>
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	059b      	lsls	r3, r3, #22
 8004a6a:	d402      	bmi.n	8004a72 <_puts_r+0x72>
 8004a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a6e:	f000 f974 	bl	8004d5a <__retarget_lock_release_recursive>
 8004a72:	4628      	mov	r0, r5
 8004a74:	bd70      	pop	{r4, r5, r6, pc}
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	da04      	bge.n	8004a84 <_puts_r+0x84>
 8004a7a:	69a2      	ldr	r2, [r4, #24]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	dc06      	bgt.n	8004a8e <_puts_r+0x8e>
 8004a80:	290a      	cmp	r1, #10
 8004a82:	d004      	beq.n	8004a8e <_puts_r+0x8e>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	6022      	str	r2, [r4, #0]
 8004a8a:	7019      	strb	r1, [r3, #0]
 8004a8c:	e7cf      	b.n	8004a2e <_puts_r+0x2e>
 8004a8e:	4622      	mov	r2, r4
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f854 	bl	8004b3e <__swbuf_r>
 8004a96:	3001      	adds	r0, #1
 8004a98:	d1c9      	bne.n	8004a2e <_puts_r+0x2e>
 8004a9a:	e7df      	b.n	8004a5c <_puts_r+0x5c>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	250a      	movs	r5, #10
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	6022      	str	r2, [r4, #0]
 8004aa4:	701d      	strb	r5, [r3, #0]
 8004aa6:	e7db      	b.n	8004a60 <_puts_r+0x60>

08004aa8 <puts>:
 8004aa8:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <puts+0xc>)
 8004aaa:	4601      	mov	r1, r0
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	f7ff bfa7 	b.w	8004a00 <_puts_r>
 8004ab2:	bf00      	nop
 8004ab4:	200000c8 	.word	0x200000c8

08004ab8 <__sread>:
 8004ab8:	b510      	push	{r4, lr}
 8004aba:	460c      	mov	r4, r1
 8004abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac0:	f000 f8fc 	bl	8004cbc <_read_r>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	bfab      	itete	ge
 8004ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004aca:	89a3      	ldrhlt	r3, [r4, #12]
 8004acc:	181b      	addge	r3, r3, r0
 8004ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ad2:	bfac      	ite	ge
 8004ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ad6:	81a3      	strhlt	r3, [r4, #12]
 8004ad8:	bd10      	pop	{r4, pc}

08004ada <__swrite>:
 8004ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ade:	461f      	mov	r7, r3
 8004ae0:	898b      	ldrh	r3, [r1, #12]
 8004ae2:	05db      	lsls	r3, r3, #23
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	4616      	mov	r6, r2
 8004aea:	d505      	bpl.n	8004af8 <__swrite+0x1e>
 8004aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af0:	2302      	movs	r3, #2
 8004af2:	2200      	movs	r2, #0
 8004af4:	f000 f8d0 	bl	8004c98 <_lseek_r>
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b02:	81a3      	strh	r3, [r4, #12]
 8004b04:	4632      	mov	r2, r6
 8004b06:	463b      	mov	r3, r7
 8004b08:	4628      	mov	r0, r5
 8004b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0e:	f000 b8e7 	b.w	8004ce0 <_write_r>

08004b12 <__sseek>:
 8004b12:	b510      	push	{r4, lr}
 8004b14:	460c      	mov	r4, r1
 8004b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1a:	f000 f8bd 	bl	8004c98 <_lseek_r>
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	bf15      	itete	ne
 8004b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b2e:	81a3      	strheq	r3, [r4, #12]
 8004b30:	bf18      	it	ne
 8004b32:	81a3      	strhne	r3, [r4, #12]
 8004b34:	bd10      	pop	{r4, pc}

08004b36 <__sclose>:
 8004b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b3a:	f000 b89d 	b.w	8004c78 <_close_r>

08004b3e <__swbuf_r>:
 8004b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b40:	460e      	mov	r6, r1
 8004b42:	4614      	mov	r4, r2
 8004b44:	4605      	mov	r5, r0
 8004b46:	b118      	cbz	r0, 8004b50 <__swbuf_r+0x12>
 8004b48:	6a03      	ldr	r3, [r0, #32]
 8004b4a:	b90b      	cbnz	r3, 8004b50 <__swbuf_r+0x12>
 8004b4c:	f7ff ff22 	bl	8004994 <__sinit>
 8004b50:	69a3      	ldr	r3, [r4, #24]
 8004b52:	60a3      	str	r3, [r4, #8]
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	071a      	lsls	r2, r3, #28
 8004b58:	d525      	bpl.n	8004ba6 <__swbuf_r+0x68>
 8004b5a:	6923      	ldr	r3, [r4, #16]
 8004b5c:	b31b      	cbz	r3, 8004ba6 <__swbuf_r+0x68>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	6922      	ldr	r2, [r4, #16]
 8004b62:	1a98      	subs	r0, r3, r2
 8004b64:	6963      	ldr	r3, [r4, #20]
 8004b66:	b2f6      	uxtb	r6, r6
 8004b68:	4283      	cmp	r3, r0
 8004b6a:	4637      	mov	r7, r6
 8004b6c:	dc04      	bgt.n	8004b78 <__swbuf_r+0x3a>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 fa71 	bl	8005058 <_fflush_r>
 8004b76:	b9e0      	cbnz	r0, 8004bb2 <__swbuf_r+0x74>
 8004b78:	68a3      	ldr	r3, [r4, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60a3      	str	r3, [r4, #8]
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	701e      	strb	r6, [r3, #0]
 8004b86:	6962      	ldr	r2, [r4, #20]
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d004      	beq.n	8004b98 <__swbuf_r+0x5a>
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	07db      	lsls	r3, r3, #31
 8004b92:	d506      	bpl.n	8004ba2 <__swbuf_r+0x64>
 8004b94:	2e0a      	cmp	r6, #10
 8004b96:	d104      	bne.n	8004ba2 <__swbuf_r+0x64>
 8004b98:	4621      	mov	r1, r4
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f000 fa5c 	bl	8005058 <_fflush_r>
 8004ba0:	b938      	cbnz	r0, 8004bb2 <__swbuf_r+0x74>
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 f805 	bl	8004bb8 <__swsetup_r>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d0d5      	beq.n	8004b5e <__swbuf_r+0x20>
 8004bb2:	f04f 37ff 	mov.w	r7, #4294967295
 8004bb6:	e7f4      	b.n	8004ba2 <__swbuf_r+0x64>

08004bb8 <__swsetup_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <__swsetup_r+0xac>)
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	b118      	cbz	r0, 8004bcc <__swsetup_r+0x14>
 8004bc4:	6a03      	ldr	r3, [r0, #32]
 8004bc6:	b90b      	cbnz	r3, 8004bcc <__swsetup_r+0x14>
 8004bc8:	f7ff fee4 	bl	8004994 <__sinit>
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bd2:	0718      	lsls	r0, r3, #28
 8004bd4:	d422      	bmi.n	8004c1c <__swsetup_r+0x64>
 8004bd6:	06d9      	lsls	r1, r3, #27
 8004bd8:	d407      	bmi.n	8004bea <__swsetup_r+0x32>
 8004bda:	2309      	movs	r3, #9
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	e034      	b.n	8004c54 <__swsetup_r+0x9c>
 8004bea:	0758      	lsls	r0, r3, #29
 8004bec:	d512      	bpl.n	8004c14 <__swsetup_r+0x5c>
 8004bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf0:	b141      	cbz	r1, 8004c04 <__swsetup_r+0x4c>
 8004bf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bf6:	4299      	cmp	r1, r3
 8004bf8:	d002      	beq.n	8004c00 <__swsetup_r+0x48>
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f000 f8ae 	bl	8004d5c <_free_r>
 8004c00:	2300      	movs	r3, #0
 8004c02:	6363      	str	r3, [r4, #52]	; 0x34
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6063      	str	r3, [r4, #4]
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f043 0308 	orr.w	r3, r3, #8
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	6923      	ldr	r3, [r4, #16]
 8004c1e:	b94b      	cbnz	r3, 8004c34 <__swsetup_r+0x7c>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2a:	d003      	beq.n	8004c34 <__swsetup_r+0x7c>
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f000 fa60 	bl	80050f4 <__smakebuf_r>
 8004c34:	89a0      	ldrh	r0, [r4, #12]
 8004c36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c3a:	f010 0301 	ands.w	r3, r0, #1
 8004c3e:	d00a      	beq.n	8004c56 <__swsetup_r+0x9e>
 8004c40:	2300      	movs	r3, #0
 8004c42:	60a3      	str	r3, [r4, #8]
 8004c44:	6963      	ldr	r3, [r4, #20]
 8004c46:	425b      	negs	r3, r3
 8004c48:	61a3      	str	r3, [r4, #24]
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	b943      	cbnz	r3, 8004c60 <__swsetup_r+0xa8>
 8004c4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c52:	d1c4      	bne.n	8004bde <__swsetup_r+0x26>
 8004c54:	bd38      	pop	{r3, r4, r5, pc}
 8004c56:	0781      	lsls	r1, r0, #30
 8004c58:	bf58      	it	pl
 8004c5a:	6963      	ldrpl	r3, [r4, #20]
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	e7f4      	b.n	8004c4a <__swsetup_r+0x92>
 8004c60:	2000      	movs	r0, #0
 8004c62:	e7f7      	b.n	8004c54 <__swsetup_r+0x9c>
 8004c64:	200000c8 	.word	0x200000c8

08004c68 <memset>:
 8004c68:	4402      	add	r2, r0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d100      	bne.n	8004c72 <memset+0xa>
 8004c70:	4770      	bx	lr
 8004c72:	f803 1b01 	strb.w	r1, [r3], #1
 8004c76:	e7f9      	b.n	8004c6c <memset+0x4>

08004c78 <_close_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d06      	ldr	r5, [pc, #24]	; (8004c94 <_close_r+0x1c>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	f7fc faad 	bl	80011e2 <_close>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_close_r+0x1a>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_close_r+0x1a>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	200007c4 	.word	0x200007c4

08004c98 <_lseek_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d07      	ldr	r5, [pc, #28]	; (8004cb8 <_lseek_r+0x20>)
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7fc fac2 	bl	8001230 <_lseek>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_lseek_r+0x1e>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_lseek_r+0x1e>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	200007c4 	.word	0x200007c4

08004cbc <_read_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4d07      	ldr	r5, [pc, #28]	; (8004cdc <_read_r+0x20>)
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	4608      	mov	r0, r1
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	602a      	str	r2, [r5, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f7fc fa50 	bl	8001170 <_read>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_read_r+0x1e>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_read_r+0x1e>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	200007c4 	.word	0x200007c4

08004ce0 <_write_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d07      	ldr	r5, [pc, #28]	; (8004d00 <_write_r+0x20>)
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	4608      	mov	r0, r1
 8004ce8:	4611      	mov	r1, r2
 8004cea:	2200      	movs	r2, #0
 8004cec:	602a      	str	r2, [r5, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f7fc fa5b 	bl	80011aa <_write>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_write_r+0x1e>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_write_r+0x1e>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	200007c4 	.word	0x200007c4

08004d04 <__errno>:
 8004d04:	4b01      	ldr	r3, [pc, #4]	; (8004d0c <__errno+0x8>)
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	200000c8 	.word	0x200000c8

08004d10 <__libc_init_array>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	4d0d      	ldr	r5, [pc, #52]	; (8004d48 <__libc_init_array+0x38>)
 8004d14:	4c0d      	ldr	r4, [pc, #52]	; (8004d4c <__libc_init_array+0x3c>)
 8004d16:	1b64      	subs	r4, r4, r5
 8004d18:	10a4      	asrs	r4, r4, #2
 8004d1a:	2600      	movs	r6, #0
 8004d1c:	42a6      	cmp	r6, r4
 8004d1e:	d109      	bne.n	8004d34 <__libc_init_array+0x24>
 8004d20:	4d0b      	ldr	r5, [pc, #44]	; (8004d50 <__libc_init_array+0x40>)
 8004d22:	4c0c      	ldr	r4, [pc, #48]	; (8004d54 <__libc_init_array+0x44>)
 8004d24:	f000 fa54 	bl	80051d0 <_init>
 8004d28:	1b64      	subs	r4, r4, r5
 8004d2a:	10a4      	asrs	r4, r4, #2
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	42a6      	cmp	r6, r4
 8004d30:	d105      	bne.n	8004d3e <__libc_init_array+0x2e>
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d38:	4798      	blx	r3
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7ee      	b.n	8004d1c <__libc_init_array+0xc>
 8004d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d42:	4798      	blx	r3
 8004d44:	3601      	adds	r6, #1
 8004d46:	e7f2      	b.n	8004d2e <__libc_init_array+0x1e>
 8004d48:	080170bc 	.word	0x080170bc
 8004d4c:	080170bc 	.word	0x080170bc
 8004d50:	080170bc 	.word	0x080170bc
 8004d54:	080170c0 	.word	0x080170c0

08004d58 <__retarget_lock_acquire_recursive>:
 8004d58:	4770      	bx	lr

08004d5a <__retarget_lock_release_recursive>:
 8004d5a:	4770      	bx	lr

08004d5c <_free_r>:
 8004d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d5e:	2900      	cmp	r1, #0
 8004d60:	d044      	beq.n	8004dec <_free_r+0x90>
 8004d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d66:	9001      	str	r0, [sp, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d6e:	bfb8      	it	lt
 8004d70:	18e4      	addlt	r4, r4, r3
 8004d72:	f000 f8df 	bl	8004f34 <__malloc_lock>
 8004d76:	4a1e      	ldr	r2, [pc, #120]	; (8004df0 <_free_r+0x94>)
 8004d78:	9801      	ldr	r0, [sp, #4]
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	b933      	cbnz	r3, 8004d8c <_free_r+0x30>
 8004d7e:	6063      	str	r3, [r4, #4]
 8004d80:	6014      	str	r4, [r2, #0]
 8004d82:	b003      	add	sp, #12
 8004d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d88:	f000 b8da 	b.w	8004f40 <__malloc_unlock>
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	d908      	bls.n	8004da2 <_free_r+0x46>
 8004d90:	6825      	ldr	r5, [r4, #0]
 8004d92:	1961      	adds	r1, r4, r5
 8004d94:	428b      	cmp	r3, r1
 8004d96:	bf01      	itttt	eq
 8004d98:	6819      	ldreq	r1, [r3, #0]
 8004d9a:	685b      	ldreq	r3, [r3, #4]
 8004d9c:	1949      	addeq	r1, r1, r5
 8004d9e:	6021      	streq	r1, [r4, #0]
 8004da0:	e7ed      	b.n	8004d7e <_free_r+0x22>
 8004da2:	461a      	mov	r2, r3
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	b10b      	cbz	r3, 8004dac <_free_r+0x50>
 8004da8:	42a3      	cmp	r3, r4
 8004daa:	d9fa      	bls.n	8004da2 <_free_r+0x46>
 8004dac:	6811      	ldr	r1, [r2, #0]
 8004dae:	1855      	adds	r5, r2, r1
 8004db0:	42a5      	cmp	r5, r4
 8004db2:	d10b      	bne.n	8004dcc <_free_r+0x70>
 8004db4:	6824      	ldr	r4, [r4, #0]
 8004db6:	4421      	add	r1, r4
 8004db8:	1854      	adds	r4, r2, r1
 8004dba:	42a3      	cmp	r3, r4
 8004dbc:	6011      	str	r1, [r2, #0]
 8004dbe:	d1e0      	bne.n	8004d82 <_free_r+0x26>
 8004dc0:	681c      	ldr	r4, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	6053      	str	r3, [r2, #4]
 8004dc6:	440c      	add	r4, r1
 8004dc8:	6014      	str	r4, [r2, #0]
 8004dca:	e7da      	b.n	8004d82 <_free_r+0x26>
 8004dcc:	d902      	bls.n	8004dd4 <_free_r+0x78>
 8004dce:	230c      	movs	r3, #12
 8004dd0:	6003      	str	r3, [r0, #0]
 8004dd2:	e7d6      	b.n	8004d82 <_free_r+0x26>
 8004dd4:	6825      	ldr	r5, [r4, #0]
 8004dd6:	1961      	adds	r1, r4, r5
 8004dd8:	428b      	cmp	r3, r1
 8004dda:	bf04      	itt	eq
 8004ddc:	6819      	ldreq	r1, [r3, #0]
 8004dde:	685b      	ldreq	r3, [r3, #4]
 8004de0:	6063      	str	r3, [r4, #4]
 8004de2:	bf04      	itt	eq
 8004de4:	1949      	addeq	r1, r1, r5
 8004de6:	6021      	streq	r1, [r4, #0]
 8004de8:	6054      	str	r4, [r2, #4]
 8004dea:	e7ca      	b.n	8004d82 <_free_r+0x26>
 8004dec:	b003      	add	sp, #12
 8004dee:	bd30      	pop	{r4, r5, pc}
 8004df0:	200007cc 	.word	0x200007cc

08004df4 <sbrk_aligned>:
 8004df4:	b570      	push	{r4, r5, r6, lr}
 8004df6:	4e0e      	ldr	r6, [pc, #56]	; (8004e30 <sbrk_aligned+0x3c>)
 8004df8:	460c      	mov	r4, r1
 8004dfa:	6831      	ldr	r1, [r6, #0]
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	b911      	cbnz	r1, 8004e06 <sbrk_aligned+0x12>
 8004e00:	f000 f9d6 	bl	80051b0 <_sbrk_r>
 8004e04:	6030      	str	r0, [r6, #0]
 8004e06:	4621      	mov	r1, r4
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 f9d1 	bl	80051b0 <_sbrk_r>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	d00a      	beq.n	8004e28 <sbrk_aligned+0x34>
 8004e12:	1cc4      	adds	r4, r0, #3
 8004e14:	f024 0403 	bic.w	r4, r4, #3
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	d007      	beq.n	8004e2c <sbrk_aligned+0x38>
 8004e1c:	1a21      	subs	r1, r4, r0
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 f9c6 	bl	80051b0 <_sbrk_r>
 8004e24:	3001      	adds	r0, #1
 8004e26:	d101      	bne.n	8004e2c <sbrk_aligned+0x38>
 8004e28:	f04f 34ff 	mov.w	r4, #4294967295
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}
 8004e30:	200007d0 	.word	0x200007d0

08004e34 <_malloc_r>:
 8004e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e38:	1ccd      	adds	r5, r1, #3
 8004e3a:	f025 0503 	bic.w	r5, r5, #3
 8004e3e:	3508      	adds	r5, #8
 8004e40:	2d0c      	cmp	r5, #12
 8004e42:	bf38      	it	cc
 8004e44:	250c      	movcc	r5, #12
 8004e46:	2d00      	cmp	r5, #0
 8004e48:	4607      	mov	r7, r0
 8004e4a:	db01      	blt.n	8004e50 <_malloc_r+0x1c>
 8004e4c:	42a9      	cmp	r1, r5
 8004e4e:	d905      	bls.n	8004e5c <_malloc_r+0x28>
 8004e50:	230c      	movs	r3, #12
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	2600      	movs	r6, #0
 8004e56:	4630      	mov	r0, r6
 8004e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f30 <_malloc_r+0xfc>
 8004e60:	f000 f868 	bl	8004f34 <__malloc_lock>
 8004e64:	f8d8 3000 	ldr.w	r3, [r8]
 8004e68:	461c      	mov	r4, r3
 8004e6a:	bb5c      	cbnz	r4, 8004ec4 <_malloc_r+0x90>
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4638      	mov	r0, r7
 8004e70:	f7ff ffc0 	bl	8004df4 <sbrk_aligned>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	4604      	mov	r4, r0
 8004e78:	d155      	bne.n	8004f26 <_malloc_r+0xf2>
 8004e7a:	f8d8 4000 	ldr.w	r4, [r8]
 8004e7e:	4626      	mov	r6, r4
 8004e80:	2e00      	cmp	r6, #0
 8004e82:	d145      	bne.n	8004f10 <_malloc_r+0xdc>
 8004e84:	2c00      	cmp	r4, #0
 8004e86:	d048      	beq.n	8004f1a <_malloc_r+0xe6>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	eb04 0903 	add.w	r9, r4, r3
 8004e92:	f000 f98d 	bl	80051b0 <_sbrk_r>
 8004e96:	4581      	cmp	r9, r0
 8004e98:	d13f      	bne.n	8004f1a <_malloc_r+0xe6>
 8004e9a:	6821      	ldr	r1, [r4, #0]
 8004e9c:	1a6d      	subs	r5, r5, r1
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	f7ff ffa7 	bl	8004df4 <sbrk_aligned>
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d037      	beq.n	8004f1a <_malloc_r+0xe6>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	442b      	add	r3, r5
 8004eae:	6023      	str	r3, [r4, #0]
 8004eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d038      	beq.n	8004f2a <_malloc_r+0xf6>
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	42a2      	cmp	r2, r4
 8004ebc:	d12b      	bne.n	8004f16 <_malloc_r+0xe2>
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	605a      	str	r2, [r3, #4]
 8004ec2:	e00f      	b.n	8004ee4 <_malloc_r+0xb0>
 8004ec4:	6822      	ldr	r2, [r4, #0]
 8004ec6:	1b52      	subs	r2, r2, r5
 8004ec8:	d41f      	bmi.n	8004f0a <_malloc_r+0xd6>
 8004eca:	2a0b      	cmp	r2, #11
 8004ecc:	d917      	bls.n	8004efe <_malloc_r+0xca>
 8004ece:	1961      	adds	r1, r4, r5
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	6025      	str	r5, [r4, #0]
 8004ed4:	bf18      	it	ne
 8004ed6:	6059      	strne	r1, [r3, #4]
 8004ed8:	6863      	ldr	r3, [r4, #4]
 8004eda:	bf08      	it	eq
 8004edc:	f8c8 1000 	streq.w	r1, [r8]
 8004ee0:	5162      	str	r2, [r4, r5]
 8004ee2:	604b      	str	r3, [r1, #4]
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	f104 060b 	add.w	r6, r4, #11
 8004eea:	f000 f829 	bl	8004f40 <__malloc_unlock>
 8004eee:	f026 0607 	bic.w	r6, r6, #7
 8004ef2:	1d23      	adds	r3, r4, #4
 8004ef4:	1af2      	subs	r2, r6, r3
 8004ef6:	d0ae      	beq.n	8004e56 <_malloc_r+0x22>
 8004ef8:	1b9b      	subs	r3, r3, r6
 8004efa:	50a3      	str	r3, [r4, r2]
 8004efc:	e7ab      	b.n	8004e56 <_malloc_r+0x22>
 8004efe:	42a3      	cmp	r3, r4
 8004f00:	6862      	ldr	r2, [r4, #4]
 8004f02:	d1dd      	bne.n	8004ec0 <_malloc_r+0x8c>
 8004f04:	f8c8 2000 	str.w	r2, [r8]
 8004f08:	e7ec      	b.n	8004ee4 <_malloc_r+0xb0>
 8004f0a:	4623      	mov	r3, r4
 8004f0c:	6864      	ldr	r4, [r4, #4]
 8004f0e:	e7ac      	b.n	8004e6a <_malloc_r+0x36>
 8004f10:	4634      	mov	r4, r6
 8004f12:	6876      	ldr	r6, [r6, #4]
 8004f14:	e7b4      	b.n	8004e80 <_malloc_r+0x4c>
 8004f16:	4613      	mov	r3, r2
 8004f18:	e7cc      	b.n	8004eb4 <_malloc_r+0x80>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	4638      	mov	r0, r7
 8004f20:	f000 f80e 	bl	8004f40 <__malloc_unlock>
 8004f24:	e797      	b.n	8004e56 <_malloc_r+0x22>
 8004f26:	6025      	str	r5, [r4, #0]
 8004f28:	e7dc      	b.n	8004ee4 <_malloc_r+0xb0>
 8004f2a:	605b      	str	r3, [r3, #4]
 8004f2c:	deff      	udf	#255	; 0xff
 8004f2e:	bf00      	nop
 8004f30:	200007cc 	.word	0x200007cc

08004f34 <__malloc_lock>:
 8004f34:	4801      	ldr	r0, [pc, #4]	; (8004f3c <__malloc_lock+0x8>)
 8004f36:	f7ff bf0f 	b.w	8004d58 <__retarget_lock_acquire_recursive>
 8004f3a:	bf00      	nop
 8004f3c:	200007c8 	.word	0x200007c8

08004f40 <__malloc_unlock>:
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <__malloc_unlock+0x8>)
 8004f42:	f7ff bf0a 	b.w	8004d5a <__retarget_lock_release_recursive>
 8004f46:	bf00      	nop
 8004f48:	200007c8 	.word	0x200007c8

08004f4c <__sflush_r>:
 8004f4c:	898a      	ldrh	r2, [r1, #12]
 8004f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f52:	4605      	mov	r5, r0
 8004f54:	0710      	lsls	r0, r2, #28
 8004f56:	460c      	mov	r4, r1
 8004f58:	d458      	bmi.n	800500c <__sflush_r+0xc0>
 8004f5a:	684b      	ldr	r3, [r1, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	dc05      	bgt.n	8004f6c <__sflush_r+0x20>
 8004f60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	dc02      	bgt.n	8004f6c <__sflush_r+0x20>
 8004f66:	2000      	movs	r0, #0
 8004f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f6e:	2e00      	cmp	r6, #0
 8004f70:	d0f9      	beq.n	8004f66 <__sflush_r+0x1a>
 8004f72:	2300      	movs	r3, #0
 8004f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f78:	682f      	ldr	r7, [r5, #0]
 8004f7a:	6a21      	ldr	r1, [r4, #32]
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	d032      	beq.n	8004fe6 <__sflush_r+0x9a>
 8004f80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	075a      	lsls	r2, r3, #29
 8004f86:	d505      	bpl.n	8004f94 <__sflush_r+0x48>
 8004f88:	6863      	ldr	r3, [r4, #4]
 8004f8a:	1ac0      	subs	r0, r0, r3
 8004f8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f8e:	b10b      	cbz	r3, 8004f94 <__sflush_r+0x48>
 8004f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f92:	1ac0      	subs	r0, r0, r3
 8004f94:	2300      	movs	r3, #0
 8004f96:	4602      	mov	r2, r0
 8004f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f9a:	6a21      	ldr	r1, [r4, #32]
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b0      	blx	r6
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	d106      	bne.n	8004fb4 <__sflush_r+0x68>
 8004fa6:	6829      	ldr	r1, [r5, #0]
 8004fa8:	291d      	cmp	r1, #29
 8004faa:	d82b      	bhi.n	8005004 <__sflush_r+0xb8>
 8004fac:	4a29      	ldr	r2, [pc, #164]	; (8005054 <__sflush_r+0x108>)
 8004fae:	410a      	asrs	r2, r1
 8004fb0:	07d6      	lsls	r6, r2, #31
 8004fb2:	d427      	bmi.n	8005004 <__sflush_r+0xb8>
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	6062      	str	r2, [r4, #4]
 8004fb8:	04d9      	lsls	r1, r3, #19
 8004fba:	6922      	ldr	r2, [r4, #16]
 8004fbc:	6022      	str	r2, [r4, #0]
 8004fbe:	d504      	bpl.n	8004fca <__sflush_r+0x7e>
 8004fc0:	1c42      	adds	r2, r0, #1
 8004fc2:	d101      	bne.n	8004fc8 <__sflush_r+0x7c>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b903      	cbnz	r3, 8004fca <__sflush_r+0x7e>
 8004fc8:	6560      	str	r0, [r4, #84]	; 0x54
 8004fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fcc:	602f      	str	r7, [r5, #0]
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	d0c9      	beq.n	8004f66 <__sflush_r+0x1a>
 8004fd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fd6:	4299      	cmp	r1, r3
 8004fd8:	d002      	beq.n	8004fe0 <__sflush_r+0x94>
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f7ff febe 	bl	8004d5c <_free_r>
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	6360      	str	r0, [r4, #52]	; 0x34
 8004fe4:	e7c0      	b.n	8004f68 <__sflush_r+0x1c>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	4628      	mov	r0, r5
 8004fea:	47b0      	blx	r6
 8004fec:	1c41      	adds	r1, r0, #1
 8004fee:	d1c8      	bne.n	8004f82 <__sflush_r+0x36>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0c5      	beq.n	8004f82 <__sflush_r+0x36>
 8004ff6:	2b1d      	cmp	r3, #29
 8004ff8:	d001      	beq.n	8004ffe <__sflush_r+0xb2>
 8004ffa:	2b16      	cmp	r3, #22
 8004ffc:	d101      	bne.n	8005002 <__sflush_r+0xb6>
 8004ffe:	602f      	str	r7, [r5, #0]
 8005000:	e7b1      	b.n	8004f66 <__sflush_r+0x1a>
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005008:	81a3      	strh	r3, [r4, #12]
 800500a:	e7ad      	b.n	8004f68 <__sflush_r+0x1c>
 800500c:	690f      	ldr	r7, [r1, #16]
 800500e:	2f00      	cmp	r7, #0
 8005010:	d0a9      	beq.n	8004f66 <__sflush_r+0x1a>
 8005012:	0793      	lsls	r3, r2, #30
 8005014:	680e      	ldr	r6, [r1, #0]
 8005016:	bf08      	it	eq
 8005018:	694b      	ldreq	r3, [r1, #20]
 800501a:	600f      	str	r7, [r1, #0]
 800501c:	bf18      	it	ne
 800501e:	2300      	movne	r3, #0
 8005020:	eba6 0807 	sub.w	r8, r6, r7
 8005024:	608b      	str	r3, [r1, #8]
 8005026:	f1b8 0f00 	cmp.w	r8, #0
 800502a:	dd9c      	ble.n	8004f66 <__sflush_r+0x1a>
 800502c:	6a21      	ldr	r1, [r4, #32]
 800502e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005030:	4643      	mov	r3, r8
 8005032:	463a      	mov	r2, r7
 8005034:	4628      	mov	r0, r5
 8005036:	47b0      	blx	r6
 8005038:	2800      	cmp	r0, #0
 800503a:	dc06      	bgt.n	800504a <__sflush_r+0xfe>
 800503c:	89a3      	ldrh	r3, [r4, #12]
 800503e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005042:	81a3      	strh	r3, [r4, #12]
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	e78e      	b.n	8004f68 <__sflush_r+0x1c>
 800504a:	4407      	add	r7, r0
 800504c:	eba8 0800 	sub.w	r8, r8, r0
 8005050:	e7e9      	b.n	8005026 <__sflush_r+0xda>
 8005052:	bf00      	nop
 8005054:	dfbffffe 	.word	0xdfbffffe

08005058 <_fflush_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	690b      	ldr	r3, [r1, #16]
 800505c:	4605      	mov	r5, r0
 800505e:	460c      	mov	r4, r1
 8005060:	b913      	cbnz	r3, 8005068 <_fflush_r+0x10>
 8005062:	2500      	movs	r5, #0
 8005064:	4628      	mov	r0, r5
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	b118      	cbz	r0, 8005072 <_fflush_r+0x1a>
 800506a:	6a03      	ldr	r3, [r0, #32]
 800506c:	b90b      	cbnz	r3, 8005072 <_fflush_r+0x1a>
 800506e:	f7ff fc91 	bl	8004994 <__sinit>
 8005072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f3      	beq.n	8005062 <_fflush_r+0xa>
 800507a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800507c:	07d0      	lsls	r0, r2, #31
 800507e:	d404      	bmi.n	800508a <_fflush_r+0x32>
 8005080:	0599      	lsls	r1, r3, #22
 8005082:	d402      	bmi.n	800508a <_fflush_r+0x32>
 8005084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005086:	f7ff fe67 	bl	8004d58 <__retarget_lock_acquire_recursive>
 800508a:	4628      	mov	r0, r5
 800508c:	4621      	mov	r1, r4
 800508e:	f7ff ff5d 	bl	8004f4c <__sflush_r>
 8005092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005094:	07da      	lsls	r2, r3, #31
 8005096:	4605      	mov	r5, r0
 8005098:	d4e4      	bmi.n	8005064 <_fflush_r+0xc>
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	059b      	lsls	r3, r3, #22
 800509e:	d4e1      	bmi.n	8005064 <_fflush_r+0xc>
 80050a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050a2:	f7ff fe5a 	bl	8004d5a <__retarget_lock_release_recursive>
 80050a6:	e7dd      	b.n	8005064 <_fflush_r+0xc>

080050a8 <__swhatbuf_r>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	460c      	mov	r4, r1
 80050ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b0:	2900      	cmp	r1, #0
 80050b2:	b096      	sub	sp, #88	; 0x58
 80050b4:	4615      	mov	r5, r2
 80050b6:	461e      	mov	r6, r3
 80050b8:	da0d      	bge.n	80050d6 <__swhatbuf_r+0x2e>
 80050ba:	89a3      	ldrh	r3, [r4, #12]
 80050bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050c0:	f04f 0100 	mov.w	r1, #0
 80050c4:	bf0c      	ite	eq
 80050c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80050ca:	2340      	movne	r3, #64	; 0x40
 80050cc:	2000      	movs	r0, #0
 80050ce:	6031      	str	r1, [r6, #0]
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	b016      	add	sp, #88	; 0x58
 80050d4:	bd70      	pop	{r4, r5, r6, pc}
 80050d6:	466a      	mov	r2, sp
 80050d8:	f000 f848 	bl	800516c <_fstat_r>
 80050dc:	2800      	cmp	r0, #0
 80050de:	dbec      	blt.n	80050ba <__swhatbuf_r+0x12>
 80050e0:	9901      	ldr	r1, [sp, #4]
 80050e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80050e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80050ea:	4259      	negs	r1, r3
 80050ec:	4159      	adcs	r1, r3
 80050ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f2:	e7eb      	b.n	80050cc <__swhatbuf_r+0x24>

080050f4 <__smakebuf_r>:
 80050f4:	898b      	ldrh	r3, [r1, #12]
 80050f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050f8:	079d      	lsls	r5, r3, #30
 80050fa:	4606      	mov	r6, r0
 80050fc:	460c      	mov	r4, r1
 80050fe:	d507      	bpl.n	8005110 <__smakebuf_r+0x1c>
 8005100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	6123      	str	r3, [r4, #16]
 8005108:	2301      	movs	r3, #1
 800510a:	6163      	str	r3, [r4, #20]
 800510c:	b002      	add	sp, #8
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	ab01      	add	r3, sp, #4
 8005112:	466a      	mov	r2, sp
 8005114:	f7ff ffc8 	bl	80050a8 <__swhatbuf_r>
 8005118:	9900      	ldr	r1, [sp, #0]
 800511a:	4605      	mov	r5, r0
 800511c:	4630      	mov	r0, r6
 800511e:	f7ff fe89 	bl	8004e34 <_malloc_r>
 8005122:	b948      	cbnz	r0, 8005138 <__smakebuf_r+0x44>
 8005124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005128:	059a      	lsls	r2, r3, #22
 800512a:	d4ef      	bmi.n	800510c <__smakebuf_r+0x18>
 800512c:	f023 0303 	bic.w	r3, r3, #3
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	81a3      	strh	r3, [r4, #12]
 8005136:	e7e3      	b.n	8005100 <__smakebuf_r+0xc>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	6020      	str	r0, [r4, #0]
 800513c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005140:	81a3      	strh	r3, [r4, #12]
 8005142:	9b00      	ldr	r3, [sp, #0]
 8005144:	6163      	str	r3, [r4, #20]
 8005146:	9b01      	ldr	r3, [sp, #4]
 8005148:	6120      	str	r0, [r4, #16]
 800514a:	b15b      	cbz	r3, 8005164 <__smakebuf_r+0x70>
 800514c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005150:	4630      	mov	r0, r6
 8005152:	f000 f81d 	bl	8005190 <_isatty_r>
 8005156:	b128      	cbz	r0, 8005164 <__smakebuf_r+0x70>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	81a3      	strh	r3, [r4, #12]
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	431d      	orrs	r5, r3
 8005168:	81a5      	strh	r5, [r4, #12]
 800516a:	e7cf      	b.n	800510c <__smakebuf_r+0x18>

0800516c <_fstat_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	4d07      	ldr	r5, [pc, #28]	; (800518c <_fstat_r+0x20>)
 8005170:	2300      	movs	r3, #0
 8005172:	4604      	mov	r4, r0
 8005174:	4608      	mov	r0, r1
 8005176:	4611      	mov	r1, r2
 8005178:	602b      	str	r3, [r5, #0]
 800517a:	f7fc f83e 	bl	80011fa <_fstat>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	d102      	bne.n	8005188 <_fstat_r+0x1c>
 8005182:	682b      	ldr	r3, [r5, #0]
 8005184:	b103      	cbz	r3, 8005188 <_fstat_r+0x1c>
 8005186:	6023      	str	r3, [r4, #0]
 8005188:	bd38      	pop	{r3, r4, r5, pc}
 800518a:	bf00      	nop
 800518c:	200007c4 	.word	0x200007c4

08005190 <_isatty_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4d06      	ldr	r5, [pc, #24]	; (80051ac <_isatty_r+0x1c>)
 8005194:	2300      	movs	r3, #0
 8005196:	4604      	mov	r4, r0
 8005198:	4608      	mov	r0, r1
 800519a:	602b      	str	r3, [r5, #0]
 800519c:	f7fc f83d 	bl	800121a <_isatty>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d102      	bne.n	80051aa <_isatty_r+0x1a>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	b103      	cbz	r3, 80051aa <_isatty_r+0x1a>
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	200007c4 	.word	0x200007c4

080051b0 <_sbrk_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d06      	ldr	r5, [pc, #24]	; (80051cc <_sbrk_r+0x1c>)
 80051b4:	2300      	movs	r3, #0
 80051b6:	4604      	mov	r4, r0
 80051b8:	4608      	mov	r0, r1
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	f7fc f846 	bl	800124c <_sbrk>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_sbrk_r+0x1a>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_sbrk_r+0x1a>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	200007c4 	.word	0x200007c4

080051d0 <_init>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr

080051dc <_fini>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	bf00      	nop
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr
